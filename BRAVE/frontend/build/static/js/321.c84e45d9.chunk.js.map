{"version":3,"file":"static/js/321.c84e45d9.chunk.js","mappings":"8PASA,MAAMA,GAAYC,EAAAA,EAAAA,aAAAA,EAAaC,IAAS,CACpCC,oBAAqB,CACjBC,MAAO,IACPC,OAAQH,EAAMI,QAAQ,QAGxBC,GAAgBC,EAAAA,EAAAA,WAAS,SAAsBC,GAAsC,IAArC,KAAEC,EAAI,QAAEC,EAAO,gBAAEC,GAAkBH,EACrF,MAAQI,oBAAqBC,EAAY,IAAOH,EAC1CI,GAAOC,EAAAA,EAAAA,gBAAeN,EAAM,QAC5BO,GAAgBD,EAAAA,EAAAA,gBAAeN,EAAM,iBACrCQ,EAAQJ,EAAUK,MAAKC,GAAQL,IAASK,EAAKL,OACnD,OAAQM,EAAAA,cAAoBC,EAAAA,EAAkB,CAAEC,IAAKb,EAAKc,aAAcC,QAASJ,EAAAA,cAAoBK,EAAAA,EAAU,CAAEC,UAAWT,EAAOU,SAAUA,KACjI,IAAIC,EACAX,EACAN,EAAgBF,GAGkB,QAAjCmB,EAAKlB,EAAQmB,sBAAmC,IAAPD,GAAyBA,EAAGE,KAAKpB,EAASD,EACxF,EACDsB,MAAO,YAAcC,MAAO,CAC/BlB,EACAE,EAAciB,OAAS,IAAHC,QAxBdC,EAwB8BnB,EAAcoB,KAAK,KAvBxDD,EAAKF,OAAS,GAAK,GAAHC,OAAMC,EAAKE,MAAM,EAAG,IAAG,OAAQF,GAuBc,KAAM,IAEjEG,QAAOC,KAAOA,IACdH,KAAK,OA3BlB,IAAkBD,CA4BlB,IACMK,GAAiBjC,EAAAA,EAAAA,WAAS,SAAwBkC,GAAgC,IAA/B,QAAE/B,EAAO,gBAAEC,GAAkB8B,EAClF,MAAM,QAAEC,GAAY3C,IACpB,OAAQqB,EAAAA,cAAoB,MAAO,CAAEuB,UAAWD,EAAQxC,qBAAwBQ,EAAQkC,YAAYX,OAA4EvB,EAAQkC,YAAYC,KAAI,CAACpC,EAAMqC,IAAS1B,EAAAA,cAAoB,MAAO,CAAEE,IAAKb,EAAKK,KAAO,IAAMgC,GACxQ1B,EAAAA,cAAoBd,EAAe,CAAEG,KAAMA,EAAMC,QAASA,EAASC,gBAAiBA,OADsBS,EAAAA,cAAoB2B,EAAAA,EAAY,KAAM,wBAExJ,IASA,GAR+BxC,EAAAA,EAAAA,WAAS,SAAAyC,GAAsD,IAA5C,QAAEtC,EAAO,YAAEuC,EAAW,gBAAEtC,GAAkBqC,EACxF,OAAQ5B,EAAAA,cAAoB8B,EAAAA,OAAQ,CAAEC,MAAM,EAAMC,QAASH,EAAaI,SAAU,KAAMC,MAAO,2BAC3FlC,EAAAA,cAAoBmC,EAAAA,EAAe,KAC/BnC,EAAAA,cAAoB2B,EAAAA,EAAY,KAAM,+CACtC3B,EAAAA,cAAoBoB,EAAgB,CAAE9B,QAASA,EAASC,gBAAiBA,KAC7ES,EAAAA,cAAoBoC,EAAAA,EAAe,KAC/BpC,EAAAA,cAAoBqC,EAAAA,EAAQ,CAAEC,QAASA,IAAMT,IAAeU,QAAS,YAAa5B,MAAO,WAAa,UAClH,G","sources":["../node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/dialogs/ToggleConnectionsDialog.js"],"sourcesContent":["import React from 'react';\nimport { Button, Checkbox, DialogContent, DialogActions, FormControlLabel, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nfunction ellipses(slug) {\n    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;\n}\nconst useStyles = makeStyles()(theme => ({\n    connectionContainer: {\n        width: 500,\n        margin: theme.spacing(4),\n    },\n}));\nconst ConnectionRow = observer(function ConnectionRow({ conf, session, breakConnection, }) {\n    const { connectionInstances: instances = [] } = session;\n    const name = readConfObject(conf, 'name');\n    const assemblyNames = readConfObject(conf, 'assemblyNames');\n    const found = instances.find(conn => name === conn.name);\n    return (React.createElement(FormControlLabel, { key: conf.connectionId, control: React.createElement(Checkbox, { checked: !!found, onChange: () => {\n                var _a;\n                if (found) {\n                    breakConnection(conf);\n                }\n                else {\n                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);\n                }\n            }, color: \"primary\" }), label: [\n            name,\n            assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',\n        ]\n            .filter(f => !!f)\n            .join(' ') }));\n});\nconst ConnectionList = observer(function ConnectionsList({ session, breakConnection, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"div\", { className: classes.connectionContainer }, !session.connections.length ? (React.createElement(Typography, null, \"No connections found\")) : (session.connections.map((conf, idx) => (React.createElement(\"div\", { key: conf.name + '_' + idx },\n        React.createElement(ConnectionRow, { conf: conf, session: session, breakConnection: breakConnection })))))));\n});\nconst ToggleConnectionDialog = observer(function ({ session, handleClose, breakConnection, }) {\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, maxWidth: \"lg\", title: \"Turn on/off connections\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"Use the checkbox to turn on/off connections\"),\n            React.createElement(ConnectionList, { session: session, breakConnection: breakConnection })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => handleClose(), variant: \"contained\", color: \"primary\" }, \"Close\"))));\n});\nexport default ToggleConnectionDialog;\n"],"names":["useStyles","makeStyles","theme","connectionContainer","width","margin","spacing","ConnectionRow","observer","_ref","conf","session","breakConnection","connectionInstances","instances","name","readConfObject","assemblyNames","found","find","conn","React","FormControlLabel","key","connectionId","control","Checkbox","checked","onChange","_a","makeConnection","call","color","label","length","concat","slug","join","slice","filter","f","ConnectionList","_ref2","classes","className","connections","map","idx","Typography","_ref3","handleClose","Dialog","open","onClose","maxWidth","title","DialogContent","DialogActions","Button","onClick","variant"],"sourceRoot":""}