{"version":3,"file":"static/js/881.20bb6d3a.chunk.js","mappings":"8NAIA,MAeA,GAfyBA,EAAAA,EAAAA,WAAS,SAAAC,GAAmC,IAAzB,MAAEC,EAAK,YAAEC,GAAcF,EAC/D,MAAOG,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,IACzBC,EAAWH,EAAII,MAAM,yBAC3B,OAAQC,EAAAA,cAAoBC,EAAAA,OAAQ,CAAEC,MAAM,EAAMC,QAAST,EAAaU,MAAO,gBAC3EJ,EAAAA,cAAoBK,EAAAA,EAAe,CAAEC,MAAO,CAAEC,UAAW,WACrDP,EAAAA,cAAoBQ,EAAAA,EAAY,KAAM,2BACtCR,EAAAA,cAAoBQ,EAAAA,EAAY,CAAEC,MAAO,iBAAmB,4IAC5DT,EAAAA,cAAoBU,EAAAA,EAAW,CAAEC,MAAOhB,EAAKiB,SAAUC,GAASjB,EAAOiB,EAAMC,OAAOH,OAAQI,YAAa,iBAAkBC,WAAY,CAAEC,UAAW,GAAKC,MAAsB,IAAfvB,EAAIwB,SAAiBrB,EAAUsB,WAA2B,IAAfzB,EAAIwB,QAAiBrB,EAA+B,GAApB,kBAAwBuB,aAAc,QACjRrB,EAAAA,cAAoBsB,EAAAA,EAAe,KAC/BtB,EAAAA,cAAoBuB,EAAAA,EAAQ,CAAEC,QAAS,YAAaf,MAAO,UAAWgB,QAASA,KACvEhC,EAAMiC,eAAe,CAAEC,KAAM,MAAOhC,QACpCD,GAAa,EACdkC,UAAW9B,GAAY,UAC9BE,EAAAA,cAAoBuB,EAAAA,EAAQ,CAAEC,QAAS,YAAaf,MAAO,YAAagB,QAAS/B,GAAe,YAChH,G","sources":["../node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ColorByTag.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, DialogContent, DialogActions, TextField, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nconst ColorByTagDialog = observer(function ({ model, handleClose, }) {\n    const [tag, setTag] = useState('');\n    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Color by tag\" },\n        React.createElement(DialogContent, { style: { overflowX: 'hidden' } },\n            React.createElement(Typography, null, \"Enter tag to color by: \"),\n            React.createElement(Typography, { color: \"textSecondary\" }, \"Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case) for minimap2 read strand, HP for haplotype, RG for read group, etc.\"),\n            React.createElement(TextField, { value: tag, onChange: event => setTag(event.target.value), placeholder: \"Enter tag name\", inputProps: { maxLength: 2 }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', autoComplete: \"off\" }),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", onClick: () => {\n                        model.setColorScheme({ type: 'tag', tag });\n                        handleClose();\n                    }, disabled: !validTag }, \"Submit\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: handleClose }, \"Cancel\")))));\n});\nexport default ColorByTagDialog;\n"],"names":["observer","_ref","model","handleClose","tag","setTag","useState","validTag","match","React","Dialog","open","onClose","title","DialogContent","style","overflowX","Typography","color","TextField","value","onChange","event","target","placeholder","inputProps","maxLength","error","length","helperText","autoComplete","DialogActions","Button","variant","onClick","setColorScheme","type","disabled"],"sourceRoot":""}