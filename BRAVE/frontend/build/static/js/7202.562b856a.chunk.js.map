{"version":3,"file":"static/js/7202.562b856a.chunk.js","mappings":"oNAKA,MAAMA,GAAYC,EAAAA,EAAAA,aAAAA,EAAaC,IAAS,CACpCC,QAAS,CACLC,MAAO,QAEXC,MAAO,CACHC,OAAQJ,EAAMK,UACdC,QAASN,EAAMK,WAEnBE,OAAQ,CACJC,UAAW,GACXC,aAAc,IACdC,QAAS,aAGF,SAASC,EAAiBC,GAAY,IAAX,MAAEC,GAAOD,EAC/C,MAAM,QAAEE,GAAYhB,KACbiB,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,KACxBC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,cAADG,QAAgBC,KAAKC,QAC/D,OAAQC,EAAAA,cAAoBC,EAAAA,EAAO,CAAEC,UAAWX,EAAQX,OACpDoB,EAAAA,cAAoB,KAAM,KACtBA,EAAAA,cAAoB,KAAM,KAAM,sDAChCA,EAAAA,cAAoB,KAAM,KAAM,6EACpCA,EAAAA,cAAoBG,EAAAA,EAAW,CAAEC,WAAW,EAAMC,KAAM,GAAIC,MAAOd,EAAKe,SAAUC,GAASf,EAAOe,EAAMC,OAAOH,OAAQI,YAAa,sDAAuDC,QAAS,WAAYT,UAAWX,EAAQb,UACnOsB,EAAAA,cAAoBY,EAAAA,EAAQ,CAAED,QAAS,WAAYE,UAAW,SAC1D,kCACAb,EAAAA,cAAoB,QAAS,CAAEc,KAAM,OAAQC,QAAQ,EAAMC,UAAU,EAAMT,SAAUU,IAAgB,IAAf,OAAER,GAAQQ,EACxF,MAAMC,EAAM,KAAiB,OAAXT,QAA8B,IAAXA,OAAoB,EAASA,EAAOU,QAAU,IAAKC,KAAIC,IAAQ,CAChGP,KAAM,gBACNQ,eAAgBC,EAAAA,WACV,CACEC,UAAWH,EAAKI,KAChBC,aAAc,sBAEhBC,EAAAA,EAAAA,mBAAkB,CAAEC,KAAMP,IAChCQ,OAAQR,EAAKS,SAEjBrC,EAAOsC,KAAKC,UAAUd,EAAK,KAAM,GAAG,KAEhDlB,EAAAA,cAAoBG,EAAAA,EAAW,CAAEG,MAAOX,EAAWY,SAAUC,GAASZ,EAAaY,EAAMC,OAAOH,OAAQ2B,WAAY,eACpHjC,EAAAA,cAAoBY,EAAAA,EAAQ,CAAED,QAAS,YAAaT,UAAWX,EAAQP,OAAQkD,QAASA,KAChF,IAAIC,EACJ,MAAMC,GAAUC,EAAAA,EAAAA,YAAW/C,GACrBgD,EAAU,CAAC,GAADzC,OACTF,EAAU4C,cAAcC,WAAW,IAAK,KAAI,KAAA3C,OAAIC,KAAKC,OAAK,GAAAF,OAC1DuC,EAAQK,UAAY,GAAK,kBAC9BC,KAAK,IAEP,IAAIC,EACJ,IACIA,EAAUZ,KAAKa,MAAMpD,EACzB,CACA,MAAOqD,GACHF,EAAUnD,EAAIsD,MAAM,aACxB,CACA,MAAMC,EAA4B,kBAAfJ,EAAQ,GACrB,CAAEA,WACF,CAAEK,YAAaL,IACjBM,EAAAA,EAAAA,wBAAuBb,KACvBA,EAAQc,aAAa,CACjBZ,UACAxB,KAAM,yBACNgB,KAAMnC,EACNwD,cAAe,CAAC7D,EAAM8D,UACtBC,QAAS,CACLvC,KAAM,wBACHiC,KAGW,QAArBZ,EAAK7C,EAAMgE,YAAyB,IAAPnB,GAAyBA,EAAGoB,UAAUjB,IAExEhD,EAAMkE,aACFC,EAAAA,EAAAA,2BAA0BrB,IAC1BA,EAAQsB,WAAWpE,EACvB,GACC,UACTU,EAAAA,cAAoB,IAAK,KAAM,sBAC/BA,EAAAA,cAAoB,KAAM,KACtBA,EAAAA,cAAoB,KAAM,KACtB,6FACA,IACAA,EAAAA,cAAoB,OAAQ,KAAM,2HAClC,IACA,iDACJA,EAAAA,cAAoB,KAAM,KAAM,oHAC5C,C","sources":["../node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAddTrackWidget/AddTrackWorkflow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Paper, TextField } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks';\nconst useStyles = makeStyles()(theme => ({\n    textbox: {\n        width: '100%',\n    },\n    paper: {\n        margin: theme.spacing(),\n        padding: theme.spacing(),\n    },\n    submit: {\n        marginTop: 25,\n        marginBottom: 100,\n        display: 'block',\n    },\n}));\nexport default function MultiWiggleWidget({ model }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", null, \"Enter list of URLs for bigwig files in the textbox\"),\n            React.createElement(\"li\", null, \"Or, use the button below the text box to select files from your computer\")),\n        React.createElement(TextField, { multiline: true, rows: 10, value: val, onChange: event => setVal(event.target.value), placeholder: 'Paste list of URLs here, or use file selector below', variant: \"outlined\", className: classes.textbox }),\n        React.createElement(Button, { variant: \"outlined\", component: \"label\" },\n            \"Choose Files from your computer\",\n            React.createElement(\"input\", { type: \"file\", hidden: true, multiple: true, onChange: ({ target }) => {\n                    const res = [...((target === null || target === void 0 ? void 0 : target.files) || [])].map(file => ({\n                        type: 'BigWigAdapter',\n                        bigWigLocation: isElectron\n                            ? {\n                                localPath: file.path,\n                                locationType: 'LocalPathLocation',\n                            }\n                            : storeBlobLocation({ blob: file }),\n                        source: file.name,\n                    }));\n                    setVal(JSON.stringify(res, null, 2));\n                } })),\n        React.createElement(TextField, { value: trackName, onChange: event => setTrackName(event.target.value), helperText: \"Track name\" }),\n        React.createElement(Button, { variant: \"contained\", className: classes.submit, onClick: () => {\n                var _a;\n                const session = getSession(model);\n                const trackId = [\n                    `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n                    `${session.adminMode ? '' : '-sessionTrack'}`,\n                ].join('');\n                // allow list of bigwigs in JSON format or line-by-line\n                let bigWigs;\n                try {\n                    bigWigs = JSON.parse(val);\n                }\n                catch (e) {\n                    bigWigs = val.split(/\\n|\\r\\n|\\r/);\n                }\n                const obj = typeof bigWigs[0] === 'string'\n                    ? { bigWigs }\n                    : { subadapters: bigWigs };\n                if (isSessionWithAddTracks(session)) {\n                    session.addTrackConf({\n                        trackId,\n                        type: 'MultiQuantitativeTrack',\n                        name: trackName,\n                        assemblyNames: [model.assembly],\n                        adapter: {\n                            type: 'MultiWiggleAdapter',\n                            ...obj,\n                        },\n                    });\n                    (_a = model.view) === null || _a === void 0 ? void 0 : _a.showTrack(trackId);\n                }\n                model.clearData();\n                if (isSessionModelWithWidgets(session)) {\n                    session.hideWidget(model);\n                }\n            } }, \"Submit\"),\n        React.createElement(\"p\", null, \"Additional notes: \"),\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", null,\n                \"The list of bigwig files in the text box can be a list of URLs, or a list of elements like\",\n                ' ',\n                React.createElement(\"code\", null, `[{\"type\":\"BigWigAdapter\",\"bigWigLocation\":{\"uri\":\"http://host/file.bw\"}, \"color\":\"green\",\"source\":\"name for subtrack\"}]`),\n                ' ',\n                \"to apply e.g. the color attribute to the view\"),\n            React.createElement(\"li\", null, \"Adding local files will update the textbox with JSON contents that are ready to submit with the \\\"Submit\\\" button\"))));\n}\n"],"names":["useStyles","makeStyles","theme","textbox","width","paper","margin","spacing","padding","submit","marginTop","marginBottom","display","MultiWiggleWidget","_ref","model","classes","val","setVal","useState","trackName","setTrackName","concat","Date","now","React","Paper","className","TextField","multiline","rows","value","onChange","event","target","placeholder","variant","Button","component","type","hidden","multiple","_ref2","res","files","map","file","bigWigLocation","isElectron","localPath","path","locationType","storeBlobLocation","blob","source","name","JSON","stringify","helperText","onClick","_a","session","getSession","trackId","toLowerCase","replaceAll","adminMode","join","bigWigs","parse","e","split","obj","subadapters","isSessionWithAddTracks","addTrackConf","assemblyNames","assembly","adapter","view","showTrack","clearData","isSessionModelWithWidgets","hideWidget"],"sourceRoot":""}