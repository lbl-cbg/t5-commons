{"version":3,"file":"static/js/6352.430094d1.chunk.js","mappings":"yMAOA,sBAA6BA,EAAAA,uBACzB,kBAAMC,GACF,MAAMC,EAAKC,KAAKC,cACVC,EAAgBF,KAAKG,QAAQ,iBAC7BC,EAAWJ,KAAKG,QAAQ,CAAC,QAAS,aAClCE,EAAYL,KAAKG,QAAQ,CAAC,QAAS,cACnCG,GAAaC,EAAAA,EAAAA,cAAaL,EAAeH,GACzCS,EAAsB,QAAdH,EACRI,EAAM,IAAIC,EAAAA,GAAiB,CAC7BJ,aACAK,cAAeH,GAAQD,EAAAA,EAAAA,cAAaH,EAAUL,QAAMa,EACpDC,cAAgBL,OAAqCI,GAA7BL,EAAAA,EAAAA,cAAaH,EAAUL,GAC/Ce,eAAgB,SAChBC,eAAgB,MAEdC,QAAeP,EAAIQ,YACzB,MAAO,CACHR,MACAS,OAAQ,IAAIC,EAAAA,EAAU,CAAEH,WAEhC,CACA,eAAMI,GAOF,OANKpB,KAAKqB,aACNrB,KAAKqB,WAAarB,KAAKF,eAAewB,OAAMC,IAExC,MADAvB,KAAKqB,gBAAaT,EACZW,CAAC,KAGRvB,KAAKqB,UAChB,CACA,iBAAMG,GAAuB,IAAXC,EAAIC,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,MAAM,IAAEjB,SAAcT,KAAKoB,YAC3B,OAAOX,EAAImB,0BAA0BH,EACzC,CACA,eAAMR,GACF,MAAM,IAAER,SAAcT,KAAKoB,YAC3B,OAAOX,EAAIQ,WACf,CACA,iBAAMY,GACF,MAAM,OAAEX,SAAiBlB,KAAKoB,YAC9B,OAAOF,EAAOW,aAClB,CACAC,WAAAA,CAAYC,GAAkB,IAAXN,EAAIC,UAAAC,OAAA,QAAAf,IAAAc,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvB,OAAOM,EAAAA,EAAAA,mBAAiBC,UACpB,MAAM,QAAEC,EAAO,MAAEC,EAAK,IAAEC,GAAQL,GAC1B,IAAEtB,EAAG,OAAES,SAAiBlB,KAAKoB,kBAC7BX,EAAI4B,SAASH,EAASC,EAAOC,EAAK,CACpCE,aAAcA,CAACC,EAAMC,KACjBC,EAASC,KAAK,IAAIC,EAAAA,EAAW,CACzBC,QAAS1B,EAAO2B,UAAUN,GAC1BrB,SACA4B,GAAI,GAAFC,OAAK/C,KAAK8C,GAAE,SAAAC,OAAQP,KACvB,KAEJf,IAEPgB,EAASO,UAAU,GACpBvB,EAAKwB,OACZ,CACAC,aAAAA,GAAmC,E","sources":["../node_modules/@jbrowse/plugin-variants/esm/VcfTabixAdapter/VcfTabixAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { TabixIndexedFile } from '@gmod/tabix';\nimport VcfParser from '@gmod/vcf';\n// local\nimport VcfFeature from '../VcfFeature';\nexport default class extends BaseFeatureDataAdapter {\n    async configurePre() {\n        const pm = this.pluginManager;\n        const vcfGzLocation = this.getConf('vcfGzLocation');\n        const location = this.getConf(['index', 'location']);\n        const indexType = this.getConf(['index', 'indexType']);\n        const filehandle = openLocation(vcfGzLocation, pm);\n        const isCSI = indexType === 'CSI';\n        const vcf = new TabixIndexedFile({\n            filehandle,\n            csiFilehandle: isCSI ? openLocation(location, pm) : undefined,\n            tbiFilehandle: !isCSI ? openLocation(location, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n            chunkSizeLimit: 1000000000,\n        });\n        const header = await vcf.getHeader();\n        return {\n            vcf,\n            parser: new VcfParser({ header }),\n        };\n    }\n    async configure() {\n        if (!this.configured) {\n            this.configured = this.configurePre().catch(e => {\n                this.configured = undefined;\n                throw e;\n            });\n        }\n        return this.configured;\n    }\n    async getRefNames(opts = {}) {\n        const { vcf } = await this.configure();\n        return vcf.getReferenceSequenceNames(opts);\n    }\n    async getHeader() {\n        const { vcf } = await this.configure();\n        return vcf.getHeader();\n    }\n    async getMetadata() {\n        const { parser } = await this.configure();\n        return parser.getMetadata();\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const { refName, start, end } = query;\n            const { vcf, parser } = await this.configure();\n            await vcf.getLines(refName, start, end, {\n                lineCallback: (line, fileOffset) => {\n                    observer.next(new VcfFeature({\n                        variant: parser.parseLine(line),\n                        parser,\n                        id: `${this.id}-vcf-${fileOffset}`,\n                    }));\n                },\n                ...opts,\n            });\n            observer.complete();\n        }, opts.signal);\n    }\n    freeResources( /* { region } */) { }\n}\n"],"names":["BaseFeatureDataAdapter","configurePre","pm","this","pluginManager","vcfGzLocation","getConf","location","indexType","filehandle","openLocation","isCSI","vcf","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","chunkSizeLimit","header","getHeader","parser","VcfParser","configure","configured","catch","e","getRefNames","opts","arguments","length","getReferenceSequenceNames","getMetadata","getFeatures","query","ObservableCreate","async","refName","start","end","getLines","lineCallback","line","fileOffset","observer","next","VcfFeature","variant","parseLine","id","concat","complete","signal","freeResources"],"sourceRoot":""}