{"version":3,"file":"static/js/224.eae2a8fe.chunk.js","mappings":"+RAOA,MAAMA,GAAYC,EAAAA,EAAAA,aAAAA,CAAa,CAC3BC,cAAe,CACXC,MAAO,UAuDf,GApD6BC,EAAAA,EAAAA,WAAS,SAAAC,GAAmC,IAAzB,MAAEC,EAAK,YAAEC,GAAcF,EACnE,MAAM,QAAEG,GAAYR,KACbS,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAS,IAC5CG,EAAeC,IAAoBJ,EAAAA,EAAAA,WAAS,IAC5CK,EAAiBC,IAAsBN,EAAAA,EAAAA,WAAS,GACvD,IAAIO,EACJ,IACI,IAAIC,OAAOV,EACf,CACA,MAAOW,GACHF,EAAQE,CACZ,CACA,OAAQC,EAAAA,cAAoBC,EAAAA,OAAQ,CAAEC,SAAU,KAAMC,MAAM,EAAMC,QAASlB,EAAamB,MAAO,mBAC3FL,EAAAA,cAAoBM,EAAAA,EAAe,CAAEC,UAAWpB,EAAQN,eACpDmB,EAAAA,cAAoBQ,EAAAA,EAAY,KAAM,mKACtCR,EAAAA,cAAoBS,EAAAA,EAAW,CAAErB,MAAOA,EAAOsB,SAAUX,GAAKV,EAASU,EAAEY,OAAOvB,OAAQwB,WAAY,4BACpGZ,EAAAA,cAAoBa,EAAAA,EAAW,KAC3Bb,EAAAA,cAAoBc,EAAAA,EAAkB,CAAEC,QAASf,EAAAA,cAAoBgB,EAAAA,EAAU,CAAEC,QAAS1B,EAAemB,SAAUQ,GAAS1B,EAAiB0B,EAAMP,OAAOM,WAAaE,MAAO,0BAC9KnB,EAAAA,cAAoBc,EAAAA,EAAkB,CAAEC,QAASf,EAAAA,cAAoBgB,EAAAA,EAAU,CAAEC,QAASxB,EAAeiB,SAAUQ,GAASxB,EAAiBwB,EAAMP,OAAOM,WAAaE,MAAO,0BAC9KnB,EAAAA,cAAoBc,EAAAA,EAAkB,CAAEC,QAASf,EAAAA,cAAoBgB,EAAAA,EAAU,CAAEC,QAAStB,EAAiBe,SAAUQ,GAAStB,EAAmBsB,EAAMP,OAAOM,WAAaE,MAAO,sBACtLtB,EAAQG,EAAAA,cAAoBQ,EAAAA,EAAY,CAAEY,MAAO,SAAW,GAAFC,OAAKxB,IAAW,MAC9EG,EAAAA,cAAoBsB,EAAAA,EAAe,KAC/BtB,EAAAA,cAAoBuB,EAAAA,EAAQ,CAAEC,QAASA,KAC/B,IAAIC,EACJ,GAAIrC,EAAO,CACP,MAAMsC,EAAU,mBAAHL,QAAuBM,KAAKC,OACnCC,GAAUC,EAAAA,EAAAA,YAAW7C,IACrB,gBAAE8C,GAAoBF,EACtBG,EAAe/C,EAAMgD,cAAc,IACrCC,EAAAA,EAAAA,wBAAuBL,KACvBA,EAAQM,aAAa,CACjBT,UACAU,KAAM,mBAAFf,OAAqBjC,GACzB6C,cAAe,CAACD,GAChBK,KAAM,eACNC,QAAS,CACLD,KAAM,wBACNE,OAAQnD,EACRG,gBACAE,gBACAE,kBACA6C,iBAAiBC,EAAAA,EAAAA,aAAyD,QAA5ChB,EAAKM,EAAgBW,IAAIV,UAAkC,IAAPP,OAAgB,EAASA,EAAGkB,cAAcC,SAASN,YAG7IrD,EAAM4D,UAAUnB,GAExB,CACAxC,GAAa,EACd4D,QAAS,YAAa1B,MAAO,WAAa,UACjDpB,EAAAA,cAAoBuB,EAAAA,EAAQ,CAAEC,QAASA,IAAMtC,IAAe4D,QAAS,YAAa1B,MAAO,aAAe,UACpH,G","sources":["../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SequenceSearchDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Checkbox, DialogActions, DialogContent, FormGroup, FormControlLabel, TextField, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '40em',\n    },\n});\nconst SequenceSearchDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [value, setValue] = useState('');\n    const [searchForward, setSearchForward] = useState(true);\n    const [searchReverse, setSearchReverse] = useState(true);\n    const [caseInsensitive, setCaseInsensitive] = useState(true);\n    let error;\n    try {\n        new RegExp(value);\n    }\n    catch (e) {\n        error = e;\n    }\n    return (React.createElement(Dialog, { maxWidth: \"xl\", open: true, onClose: handleClose, title: \"Sequence search\" },\n        React.createElement(DialogContent, { className: classes.dialogContent },\n            React.createElement(Typography, null, \"Supply a sequence to search for. A track will be created with the resulting matches once submitted. You can also supply regex style expressions e.g. AACT(C|T).\"),\n            React.createElement(TextField, { value: value, onChange: e => setValue(e.target.value), helperText: \"Sequence search pattern\" }),\n            React.createElement(FormGroup, null,\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchForward, onChange: event => setSearchForward(event.target.checked) }), label: \"Search forward strand\" }),\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchReverse, onChange: event => setSearchReverse(event.target.checked) }), label: \"Search reverse strand\" }),\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: caseInsensitive, onChange: event => setCaseInsensitive(event.target.checked) }), label: \"Case insensitive\" })),\n            error ? React.createElement(Typography, { color: \"error\" }, `${error}`) : null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    var _a;\n                    if (value) {\n                        const trackId = `sequence_search_${+Date.now()}`;\n                        const session = getSession(model);\n                        const { assemblyManager } = session;\n                        const assemblyName = model.assemblyNames[0];\n                        if (isSessionWithAddTracks(session)) {\n                            session.addTrackConf({\n                                trackId,\n                                name: `Sequence search ${value}`,\n                                assemblyNames: [assemblyName],\n                                type: 'FeatureTrack',\n                                adapter: {\n                                    type: 'SequenceSearchAdapter',\n                                    search: value,\n                                    searchForward,\n                                    searchReverse,\n                                    caseInsensitive,\n                                    sequenceAdapter: getSnapshot((_a = assemblyManager.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.configuration.sequence.adapter),\n                                },\n                            });\n                            model.showTrack(trackId);\n                        }\n                    }\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\" }, \"Submit\"),\n            React.createElement(Button, { onClick: () => handleClose(), variant: \"contained\", color: \"secondary\" }, \"Close\"))));\n});\nexport default SequenceSearchDialog;\n"],"names":["useStyles","makeStyles","dialogContent","width","observer","_ref","model","handleClose","classes","value","setValue","useState","searchForward","setSearchForward","searchReverse","setSearchReverse","caseInsensitive","setCaseInsensitive","error","RegExp","e","React","Dialog","maxWidth","open","onClose","title","DialogContent","className","Typography","TextField","onChange","target","helperText","FormGroup","FormControlLabel","control","Checkbox","checked","event","label","color","concat","DialogActions","Button","onClick","_a","trackId","Date","now","session","getSession","assemblyManager","assemblyName","assemblyNames","isSessionWithAddTracks","addTrackConf","name","type","adapter","search","sequenceAdapter","getSnapshot","get","configuration","sequence","showTrack","variant"],"sourceRoot":""}