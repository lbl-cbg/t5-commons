{"version":3,"file":"static/js/5462.969f32b8.chunk.js","mappings":"+LAIOA,eAAeC,EAA2BC,EAAMC,GACnD,MAAM,OAAEC,EAAM,GAAEC,GAAOH,GACjB,eAAEI,GAAmBH,EACrBI,GAAOC,EAAAA,EAAAA,mBAAkBN,IACvBO,SAAUC,EAAY,qBAAEC,EAAoB,MAAEC,GAAUL,EAC1DM,QAAmBC,QAAQC,IAAIJ,EAAqBK,KAAIhB,UAC1D,MAAMiB,EAAaC,EAAAA,EAAWC,OAAO,CACjCC,IAAKC,EAAMD,IACXE,OAAQD,IAINE,EAAyBrB,EAAKsB,2BAA2BH,IAC3DnB,EAAKuB,uBAAuBJ,GAChC,GAAIE,EACA,MAAO,CACHF,EACA,CACIK,aAAeC,EAAAA,cAAoBA,EAAAA,SAAgB,KAC/CA,EAAAA,cAAoB,OAAQ,CAAEC,EAAG,EAAGC,EAAG,EAAGjB,MAAOA,EAAOR,OAAQ,GAAI0B,KAAM,SAC1EH,EAAAA,cAAoB,OAAQ,CAAEC,EAAG,EAAGC,EAAG,IAAMN,MAI7D,MAAM,WAAEQ,EAAU,WAAEC,EAAU,YAAEC,EAAW,aAAEC,IAAiBC,EAAAA,EAAAA,GAAgBlB,EAAYf,GAC1F,MAAO,CACHmB,QACMa,EAAaE,eAAeL,EAAY,IACvCC,KACAC,EACHI,YAAYC,EAAAA,EAAAA,eAAcpC,GAAM,GAChCqC,UAAWpC,EACXqC,MAAOrC,EAAKqC,OAASP,EAAYO,QAExC,KAEL,OAAQb,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMd,EAAWG,KAAI,CAAAyB,EAAqBC,KAAU,IAA7BrB,EAAOsB,GAAUF,EAChF,MAAM,SAAEhC,EAAQ,QAAEmC,GAAYvB,EACxBwB,EAASpC,EAAWC,EACpBoC,GAASC,EAAAA,EAAAA,IAAM1C,EAAIqC,GACzB,OAAQf,EAAAA,cAAoBA,EAAAA,SAAgB,CAAEP,IAAK,QAAF4B,OAAUN,IACvDf,EAAAA,cAAoB,OAAQ,KACxBA,EAAAA,cAAoB,WAAY,CAAEtB,GAAIyC,GAClCnB,EAAAA,cAAoB,OAAQ,CAAEC,EAAG,EAAGC,EAAG,EAAGjB,MAAOgC,EAASxC,OAAQE,GAAkBF,MAC5FuB,EAAAA,cAAoB,IAAK,CAAEsB,UAAW,aAAFD,OAAeH,EAAM,QACrDlB,EAAAA,cAAoB,IAAK,CAAEuB,SAAU,QAAFF,OAAUF,EAAM,MAC/CnB,EAAAA,cAAoBwB,EAAAA,eAAgB,CAAER,UAAWA,MAAe,IAEpF,C","sources":["../node_modules/@jbrowse/plugin-linear-genome-view/esm/BaseLinearDisplay/models/renderSvg.js"],"sourcesContent":["import React from 'react';\nimport { getContainingView, getViewParams, ReactRendering, } from '@jbrowse/core/util';\nimport BlockState, { renderBlockData } from './serverSideRenderedBlock';\nimport { getId } from './util';\nexport async function renderBaseLinearDisplaySvg(self, opts) {\n    const { height, id } = self;\n    const { overrideHeight } = opts;\n    const view = getContainingView(self);\n    const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view;\n    const renderings = await Promise.all(roundedDynamicBlocks.map(async (block) => {\n        const blockState = BlockState.create({\n            key: block.key,\n            region: block,\n        });\n        // regionCannotBeRendered can return jsx so look for plaintext\n        // version, or just get the default if none available\n        const cannotBeRenderedReason = self.regionCannotBeRenderedText(block) ||\n            self.regionCannotBeRendered(block);\n        if (cannotBeRenderedReason) {\n            return [\n                block,\n                {\n                    reactElement: (React.createElement(React.Fragment, null,\n                        React.createElement(\"rect\", { x: 0, y: 0, width: width, height: 20, fill: \"#aaa\" }),\n                        React.createElement(\"text\", { x: 0, y: 15 }, cannotBeRenderedReason))),\n                },\n            ];\n        }\n        const { rpcManager, renderArgs, renderProps, rendererType } = renderBlockData(blockState, self);\n        return [\n            block,\n            await rendererType.renderInClient(rpcManager, {\n                ...renderArgs,\n                ...renderProps,\n                viewParams: getViewParams(self, true),\n                exportSVG: opts,\n                theme: opts.theme || renderProps.theme,\n            }),\n        ];\n    }));\n    return (React.createElement(React.Fragment, null, renderings.map(([block, rendering], index) => {\n        const { offsetPx, widthPx } = block;\n        const offset = offsetPx - viewOffsetPx;\n        const clipid = getId(id, index);\n        return (React.createElement(React.Fragment, { key: `frag-${index}` },\n            React.createElement(\"defs\", null,\n                React.createElement(\"clipPath\", { id: clipid },\n                    React.createElement(\"rect\", { x: 0, y: 0, width: widthPx, height: overrideHeight || height }))),\n            React.createElement(\"g\", { transform: `translate(${offset} 0)` },\n                React.createElement(\"g\", { clipPath: `url(#${clipid})` },\n                    React.createElement(ReactRendering, { rendering: rendering })))));\n    })));\n}\n"],"names":["async","renderBaseLinearDisplaySvg","self","opts","height","id","overrideHeight","view","getContainingView","offsetPx","viewOffsetPx","roundedDynamicBlocks","width","renderings","Promise","all","map","blockState","BlockState","create","key","block","region","cannotBeRenderedReason","regionCannotBeRenderedText","regionCannotBeRendered","reactElement","React","x","y","fill","rpcManager","renderArgs","renderProps","rendererType","renderBlockData","renderInClient","viewParams","getViewParams","exportSVG","theme","_ref","index","rendering","widthPx","offset","clipid","getId","concat","transform","clipPath","ReactRendering"],"sourceRoot":""}