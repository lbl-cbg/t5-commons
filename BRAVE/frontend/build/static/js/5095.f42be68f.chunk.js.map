{"version":3,"file":"static/js/5095.f42be68f.chunk.js","mappings":"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","sources":["../node_modules/@gmod/indexedfasta/src/indexedFasta.ts","../node_modules/@gmod/indexedfasta/src/bgzipIndexedFasta.ts","../node_modules/@jbrowse/plugin-sequence/esm/BgzipFastaAdapter/BgzipFastaAdapter.js","../node_modules/@jbrowse/plugin-sequence/esm/IndexedFastaAdapter/IndexedFastaAdapter.js"],"sourcesContent":["import { LocalFile, GenericFilehandle } from 'generic-filehandle'\n\ninterface BaseOpts {\n  signal?: AbortSignal\n}\n\ninterface IndexEntry {\n  offset: number\n  lineBytes: number\n  lineLength: number\n  length: number\n}\n\nfunction _faiOffset(idx: IndexEntry, pos: number) {\n  return (\n    idx.offset +\n    idx.lineBytes * Math.floor(pos / idx.lineLength) +\n    (pos % idx.lineLength)\n  )\n}\n\nasync function readFAI(fai: GenericFilehandle, opts?: BaseOpts) {\n  const text = await fai.readFile(opts)\n  if (!(text && text.length)) {\n    throw new Error('No data read from FASTA index (FAI) file')\n  }\n\n  let idCounter = 0\n  let currSeq: { name: string; id: number } | undefined\n  const data = text\n    .toString('utf8')\n    .split(/\\r?\\n/)\n    .filter(line => /\\S/.test(line))\n    .map(line => line.split('\\t'))\n    .filter(row => row[0] !== '')\n    .map(row => {\n      if (!currSeq || currSeq.name !== row[0]) {\n        currSeq = { name: row[0], id: idCounter }\n        idCounter += 1\n      }\n\n      return {\n        id: currSeq.id,\n        name: row[0],\n        length: +row[1],\n        start: 0,\n        end: +row[1],\n        offset: +row[2],\n        lineLength: +row[3],\n        lineBytes: +row[4],\n      }\n    })\n\n  return {\n    name: Object.fromEntries(data.map(entry => [entry.name, entry])),\n    id: Object.fromEntries(data.map(entry => [entry.id, entry])),\n  }\n}\n\nexport default class IndexedFasta {\n  fasta: GenericFilehandle\n  fai: GenericFilehandle\n  indexes?: ReturnType<typeof readFAI>\n\n  constructor({\n    fasta,\n    fai,\n    path,\n    faiPath,\n  }: {\n    fasta?: GenericFilehandle\n    fai?: GenericFilehandle\n    path?: string\n    faiPath?: string\n  }) {\n    if (fasta) {\n      this.fasta = fasta\n    } else if (path) {\n      this.fasta = new LocalFile(path)\n    } else {\n      throw new Error('Need to pass filehandle for fasta or path to localfile')\n    }\n\n    if (fai) {\n      this.fai = fai\n    } else if (faiPath) {\n      this.fai = new LocalFile(faiPath)\n    } else if (path) {\n      this.fai = new LocalFile(`${path}.fai`)\n    } else {\n      throw new Error('Need to pass filehandle for  or path to localfile')\n    }\n  }\n\n  async _getIndexes(opts?: BaseOpts) {\n    if (!this.indexes) {\n      this.indexes = readFAI(this.fai, opts)\n    }\n    return this.indexes\n  }\n\n  /**\n   * @returns {array[string]} array of string sequence\n   * names that are present in the index, in which the\n   * array index indicates the sequence ID, and the value\n   * is the sequence name\n   */\n  async getSequenceNames(opts?: BaseOpts) {\n    return Object.keys((await this._getIndexes(opts)).name)\n  }\n\n  /**\n   * @returns {array[string]} array of string sequence\n   * names that are present in the index, in which the\n   * array index indicates the sequence ID, and the value\n   * is the sequence name\n   */\n  async getSequenceSizes(opts?: BaseOpts) {\n    const returnObject = {} as { [key: string]: number }\n    const idx = await this._getIndexes(opts)\n    const vals = Object.values(idx.id)\n    for (let i = 0; i < vals.length; i += 1) {\n      returnObject[vals[i].name] = vals[i].length\n    }\n    return returnObject\n  }\n\n  /**\n   * @returns {array[string]} array of string sequence\n   * names that are present in the index, in which the\n   * array index indicates the sequence ID, and the value\n   * is the sequence name\n   */\n  async getSequenceSize(seqName: string, opts?: BaseOpts) {\n    const idx = await this._getIndexes(opts)\n    return idx.name[seqName]?.length\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @returns {Promise[boolean]} true if the file contains the given reference sequence name\n   */\n  async hasReferenceSequence(name: string, opts?: BaseOpts) {\n    return !!(await this._getIndexes(opts)).name[name]\n  }\n\n  /**\n   *\n   * @param {number} seqId\n   * @param {number} min\n   * @param {number} max\n   */\n  async getResiduesById(\n    seqId: number,\n    min: number,\n    max: number,\n    opts?: BaseOpts,\n  ) {\n    const indexEntry = (await this._getIndexes(opts)).id[seqId]\n    if (!indexEntry) {\n      return undefined\n    }\n    return this._fetchFromIndexEntry(indexEntry, min, max, opts)\n  }\n\n  /**\n   * @param {string} seqName\n   * @param {number} min\n   * @param {number} max\n   */\n  async getResiduesByName(\n    seqName: string,\n    min: number,\n    max: number,\n    opts?: BaseOpts,\n  ) {\n    const indexEntry = (await this._getIndexes(opts)).name[seqName]\n    if (!indexEntry) {\n      return undefined\n    }\n\n    return this._fetchFromIndexEntry(indexEntry, min, max, opts)\n  }\n\n  //alias for getResiduesByName\n  async getSequence(\n    seqName: string,\n    min: number,\n    max: number,\n    opts?: BaseOpts,\n  ) {\n    return this.getResiduesByName(seqName, min, max, opts)\n  }\n\n  async _fetchFromIndexEntry(\n    indexEntry: IndexEntry,\n    min = 0,\n    max: number,\n    opts?: BaseOpts,\n  ) {\n    let end = max\n    if (min < 0) {\n      throw new TypeError('regionStart cannot be less than 0')\n    }\n    if (end === undefined || end > indexEntry.length) {\n      end = indexEntry.length\n    }\n    if (min >= end) {\n      return ''\n    }\n\n    const position = _faiOffset(indexEntry, min)\n    const readlen = _faiOffset(indexEntry, end) - position\n\n    const residues = Buffer.allocUnsafe(readlen)\n    await this.fasta.read(residues, 0, readlen, position, opts)\n    return residues.toString('utf8').replace(/\\s+/g, '')\n  }\n}\n","import { BgzfFilehandle } from '@gmod/bgzf-filehandle'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport IndexedFasta from './indexedFasta'\n\nexport default class BgzipIndexedFasta extends IndexedFasta {\n  constructor({\n    fasta,\n    path,\n    fai,\n    faiPath,\n    gzi,\n    gziPath,\n  }: {\n    fasta?: GenericFilehandle\n    path?: string\n    fai?: GenericFilehandle\n    faiPath?: string\n    gzi?: GenericFilehandle\n    gziPath?: string\n  }) {\n    super({ fasta, path, fai, faiPath })\n    if (fasta && gzi) {\n      this.fasta = new BgzfFilehandle({\n        filehandle: fasta,\n        gziFilehandle: gzi,\n      })\n    } else if (path && gziPath) {\n      this.fasta = new BgzfFilehandle({ path, gziPath })\n    }\n  }\n}\n","import { BgzipIndexedFasta } from '@gmod/indexedfasta';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport IndexedFasta from '../IndexedFastaAdapter/IndexedFastaAdapter';\nexport default class extends IndexedFasta {\n    async setupPre() {\n        const fastaLocation = this.getConf('fastaLocation');\n        const faiLocation = this.getConf('faiLocation');\n        const gziLocation = this.getConf('gziLocation');\n        const fastaOpts = {\n            fasta: openLocation(fastaLocation, this.pluginManager),\n            fai: openLocation(faiLocation, this.pluginManager),\n            gzi: openLocation(gziLocation, this.pluginManager),\n        };\n        return { fasta: new BgzipIndexedFasta(fastaOpts) };\n    }\n}\n","import { IndexedFasta } from '@gmod/indexedfasta';\nimport { BaseSequenceAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { SimpleFeature } from '@jbrowse/core/util';\nimport AbortablePromiseCache from 'abortable-promise-cache';\nimport QuickLRU from '@jbrowse/core/util/QuickLRU';\nexport default class extends BaseSequenceAdapter {\n    constructor() {\n        super(...arguments);\n        this.seqCache = new AbortablePromiseCache({\n            cache: new QuickLRU({ maxSize: 200 }),\n            fill: async (args, signal) => {\n                const { refName, start, end, fasta } = args;\n                return fasta.getSequence(refName, start, end, { ...args, signal });\n            },\n        });\n    }\n    async getRefNames(opts) {\n        const { fasta } = await this.setup();\n        return fasta.getSequenceNames(opts);\n    }\n    async getRegions(opts) {\n        const { fasta } = await this.setup();\n        const seqSizes = await fasta.getSequenceSizes(opts);\n        return Object.keys(seqSizes).map(refName => ({\n            refName,\n            start: 0,\n            end: seqSizes[refName],\n        }));\n    }\n    async setupPre() {\n        const fastaLocation = this.getConf('fastaLocation');\n        const faiLocation = this.getConf('faiLocation');\n        return {\n            fasta: new IndexedFasta({\n                fasta: openLocation(fastaLocation, this.pluginManager),\n                fai: openLocation(faiLocation, this.pluginManager),\n            }),\n        };\n    }\n    async getHeader() {\n        const loc = this.getConf('metadataLocation');\n        return loc.uri === '' || loc.uri === '/path/to/fa.metadata.yaml'\n            ? null\n            : openLocation(loc, this.pluginManager).readFile('utf8');\n    }\n    async setup() {\n        if (!this.setupP) {\n            this.setupP = this.setupPre().catch(e => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    getFeatures(region, opts) {\n        const { refName, start, end } = region;\n        return ObservableCreate(async (observer) => {\n            const { fasta } = await this.setup();\n            const size = await fasta.getSequenceSize(refName, opts);\n            const regionEnd = size !== undefined ? Math.min(size, end) : end;\n            const chunks = [];\n            const chunkSize = 128000;\n            const s = start - (start % chunkSize);\n            const e = end + (chunkSize - (end % chunkSize));\n            for (let chunkStart = s; chunkStart < e; chunkStart += chunkSize) {\n                const r = {\n                    refName,\n                    start: chunkStart,\n                    end: chunkStart + chunkSize,\n                };\n                chunks.push(this.seqCache.get(JSON.stringify(r), { ...r, fasta }, opts === null || opts === void 0 ? void 0 : opts.signal));\n            }\n            const seq = (await Promise.all(chunks))\n                .join('')\n                .slice(start - s)\n                .slice(0, end - start);\n            if (seq) {\n                observer.next(new SimpleFeature({\n                    id: `${refName} ${start}-${regionEnd}`,\n                    data: { refName, start, end: regionEnd, seq },\n                }));\n            }\n            observer.complete();\n        });\n    }\n    /**\n     * called to provide a hint that data tied to a certain region\n     * will not be needed for the foreseeable future and can be purged\n     * from caches, etc\n     */\n    freeResources( /* { region } */) { }\n}\n"],"names":["_faiOffset","idx","pos","offset","lineBytes","Math","floor","lineLength","IndexedFasta","constructor","_ref","fasta","fai","path","faiPath","this","Error","LocalFile","concat","_getIndexes","opts","indexes","async","text","readFile","length","currSeq","idCounter","data","toString","split","filter","line","test","map","row","name","id","start","end","Object","fromEntries","entry","readFAI","getSequenceNames","keys","getSequenceSizes","returnObject","vals","values","i","getSequenceSize","seqName","_a","hasReferenceSequence","getResiduesById","seqId","min","max","indexEntry","_fetchFromIndexEntry","getResiduesByName","getSequence","arguments","undefined","TypeError","position","readlen","residues","Buffer","allocUnsafe","read","replace","BgzipIndexedFasta","gzi","gziPath","super","BgzfFilehandle","filehandle","gziFilehandle","setupPre","fastaLocation","getConf","faiLocation","gziLocation","fastaOpts","openLocation","pluginManager","BaseSequenceAdapter","seqCache","AbortablePromiseCache","cache","QuickLRU","maxSize","fill","args","signal","refName","getRefNames","setup","getRegions","seqSizes","getHeader","loc","uri","setupP","catch","e","getFeatures","region","ObservableCreate","size","regionEnd","chunks","chunkSize","s","chunkStart","r","push","get","JSON","stringify","seq","Promise","all","join","slice","observer","next","SimpleFeature","complete","freeResources"],"sourceRoot":""}