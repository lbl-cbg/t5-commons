{"version":3,"file":"static/js/8526.789987dd.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportFormRefNameAutocomplete.js","../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportForm.js"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { getSession } from '@jbrowse/core/util';\n// locals\nimport RefNameAutocomplete from './RefNameAutocomplete';\nimport { fetchResults } from './util';\nconst ImportFormRefNameAutocomplete = observer(function ({ model, selectedAsm, value, setValue, setOption, }) {\n    const session = getSession(model);\n    const { assemblyManager, textSearchManager } = session;\n    const { rankSearchResults } = model;\n    const searchScope = model.searchScope(selectedAsm);\n    const assembly = assemblyManager.get(selectedAsm);\n    return (React.createElement(RefNameAutocomplete, { fetchResults: queryString => fetchResults({\n            queryString,\n            assembly,\n            textSearchManager,\n            rankSearchResults,\n            searchScope,\n        }), model: model, assemblyName: selectedAsm, value: value, minWidth: 270, onChange: str => setValue(str), onSelect: val => setOption(val), TextFieldProps: {\n            variant: 'outlined',\n            helperText: 'Enter sequence name, feature name, or location',\n        } }));\n});\nexport default ImportFormRefNameAutocomplete;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\nimport { getSession } from '@jbrowse/core/util';\nimport { Button, FormControl, Container, Grid, CircularProgress, } from '@mui/material';\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui';\n// icons\nimport CloseIcon from '@mui/icons-material/Close';\nimport { handleSelectedRegion, navToOption } from '../../searchUtils';\nimport ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete';\nconst useStyles = makeStyles()(theme => ({\n    importFormContainer: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(2),\n    },\n    container: {\n        padding: theme.spacing(4),\n    },\n}));\nconst LinearGenomeViewImportForm = observer(function ({ model, }) {\n    var _a;\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { assemblyNames, assemblyManager } = session;\n    const { error } = model;\n    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);\n    const [option, setOption] = useState();\n    const assembly = assemblyManager.get(selectedAsm);\n    const assemblyError = assemblyNames.length\n        ? assembly === null || assembly === void 0 ? void 0 : assembly.error\n        : 'No configured assemblies';\n    const displayError = assemblyError || error;\n    const [value, setValue] = useState('');\n    const regions = assembly === null || assembly === void 0 ? void 0 : assembly.regions;\n    const assemblyLoaded = !!regions;\n    const r0 = regions ? (_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName : '';\n    // useEffect resets to an \"initial state\" of displaying first region from\n    // assembly after assembly change. needs to react to selectedAsm as well as\n    // r0 because changing assembly will run setValue('') and then r0 may not\n    // change if assembly names are the same across assemblies, but it still\n    // needs to be reset\n    useEffect(() => {\n        setValue(r0);\n    }, [r0, selectedAsm]);\n    // implementation notes:\n    // having this wrapped in a form allows intuitive use of enter key to submit\n    return (React.createElement(\"div\", { className: classes.container },\n        displayError ? React.createElement(ErrorMessage, { error: displayError }) : null,\n        React.createElement(Container, { className: classes.importFormContainer },\n            React.createElement(\"form\", { onSubmit: async (event) => {\n                    var _a;\n                    event.preventDefault();\n                    model.setError(undefined);\n                    if (value) {\n                        // has it's own error handling\n                        try {\n                            if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === value &&\n                                option.hasLocation()) {\n                                await navToOption({\n                                    option,\n                                    model,\n                                    assemblyName: selectedAsm,\n                                });\n                            }\n                            else if ((_a = option === null || option === void 0 ? void 0 : option.results) === null || _a === void 0 ? void 0 : _a.length) {\n                                model.setSearchResults(option.results, option.getLabel(), selectedAsm);\n                            }\n                            else if (assembly) {\n                                await handleSelectedRegion({ input: value, assembly, model });\n                            }\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notify(`${e}`, 'warning');\n                        }\n                    }\n                } },\n                React.createElement(Grid, { container: true, spacing: 1, justifyContent: \"center\", alignItems: \"center\" },\n                    React.createElement(Grid, { item: true },\n                        React.createElement(FormControl, null,\n                            React.createElement(AssemblySelector, { onChange: val => setSelectedAsm(val), localStorageKey: \"lgv\", session: session, selected: selectedAsm }))),\n                    React.createElement(Grid, { item: true }, selectedAsm ? (assemblyError ? (React.createElement(CloseIcon, { style: { color: 'red' } })) : assemblyLoaded ? (React.createElement(FormControl, null,\n                        React.createElement(ImportFormRefNameAutocomplete, { value: value, setValue: setValue, selectedAsm: selectedAsm, setOption: setOption, model: model }))) : (React.createElement(CircularProgress, { size: 20, disableShrink: true }))) : null),\n                    React.createElement(Grid, { item: true },\n                        React.createElement(FormControl, null,\n                            React.createElement(Button, { type: \"submit\", disabled: !value, className: classes.button, variant: \"contained\", color: \"primary\" }, \"Open\")),\n                        React.createElement(FormControl, null,\n                            React.createElement(Button, { disabled: !value, className: classes.button, onClick: () => {\n                                    model.setError(undefined);\n                                    model.showAllRegionsInAssembly(selectedAsm);\n                                }, variant: \"contained\", color: \"secondary\" }, \"Show all regions in assembly\"))))))));\n});\nexport default LinearGenomeViewImportForm;\n"],"names":["observer","_ref","model","selectedAsm","value","setValue","setOption","session","getSession","assemblyManager","textSearchManager","rankSearchResults","searchScope","assembly","get","React","RefNameAutocomplete","fetchResults","queryString","assemblyName","minWidth","onChange","str","onSelect","val","TextFieldProps","variant","helperText","useStyles","makeStyles","theme","importFormContainer","padding","spacing","button","margin","container","_a","classes","assemblyNames","error","setSelectedAsm","useState","option","assemblyError","length","displayError","regions","assemblyLoaded","r0","refName","useEffect","className","ErrorMessage","Container","onSubmit","async","event","preventDefault","setError","undefined","getDisplayString","hasLocation","navToOption","results","setSearchResults","getLabel","handleSelectedRegion","input","e","console","notify","concat","Grid","justifyContent","alignItems","item","FormControl","AssemblySelector","localStorageKey","selected","CloseIcon","style","color","ImportFormRefNameAutocomplete","CircularProgress","size","disableShrink","Button","type","disabled","onClick","showAllRegionsInAssembly"],"sourceRoot":""}