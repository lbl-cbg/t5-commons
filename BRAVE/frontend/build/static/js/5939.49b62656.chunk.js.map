{"version":3,"file":"static/js/5939.49b62656.chunk.js","mappings":"6LAKA,sBAA6BA,EAAAA,uBACzB,eAAMC,GACF,IAAIC,EACJ,MAAMC,QAA+C,QAA7BD,EAAKE,KAAKC,qBAAkC,IAAPH,OAAgB,EAASA,EAAGI,KAAKF,KAAMA,KAAKG,QAAQ,qBACjH,IAAKJ,EACD,MAAM,IAAIK,MAAM,4BAEpB,OAAOL,EAAQM,WACnB,CACA,iBAAMC,GAEF,aADsBN,KAAKH,aACZS,aACnB,CACAC,WAAAA,CAAYC,EAAOC,GACf,OAAOC,EAAAA,EAAAA,mBAAiBC,UACpB,IAAIb,EACJ,MAAMc,QAAwBZ,KAAKH,YAEnC,IAAMgB,MAAOC,EAAYC,IAAKC,GAAaR,EAG3C,GAFAM,EAAaG,KAAKC,IAAI,EAAGJ,EAFd,KAGXE,GAHW,IAIPA,EAAW,GAAKF,EAAaE,EAE7B,YADAG,EAASC,WAGb,MAAMC,EAAMT,EAAgBL,YAAY,IACjCC,EACHK,MAAOC,EACPC,IAAKC,GACNP,GAEGa,GAAgC,QAAnBxB,SADCyB,EAAAA,EAAAA,GAAeF,EAAIG,MAAKC,EAAAA,EAAAA,QACd,UAAuB,IAAP3B,OAAgB,EAASA,EAAG4B,IAAI,SAAW,GACnFC,EAAS3B,KAAKG,QAAQ,UACtByB,EAAgB5B,KAAKG,QAAQ,iBAC7B0B,EAAgB7B,KAAKG,QAAQ,iBAC7B2B,EAAkB9B,KAAKG,QAAQ,mBAC/B4B,EAAK,IAAIC,OAAOL,EAAQ,KAAOG,EAAkB,IAAM,KAC7D,GAAIH,EAAQ,CACR,GAAIC,EAAe,CACf,MAAMK,EAAUX,EAASY,SAASH,GAClC,IAAK,MAAMI,KAASF,EAAS,CACzB,MAAMG,EAAItB,GAAcqB,EAAME,OAAS,IACnCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQ/B,EAAMK,MAAOL,EAAMO,MACxDI,EAASqB,KAAK,IAAIC,EAAAA,cAAc,CAC5BC,SAAU,GAAFC,OAAK3C,KAAK4C,GAAE,WAAAD,OAAUP,EAAC,MAC/BS,QAASrC,EAAMqC,QACfhC,MAAOuB,EACPrB,IAAKqB,EAAID,EAAM,GAAGI,OAClBO,KAAMX,EAAM,GACZY,OAAQ,IAGpB,CACJ,CACA,GAAIlB,EAAe,CACf,MAAMI,GAAUe,EAAAA,EAAAA,QAAO1B,GAAUY,SAASH,GAC1C,IAAK,MAAMI,KAASF,EAAS,CACzB,MAAMG,EAAIpB,GAAYmB,EAAME,OAAS,IACjCC,EAAAA,EAAAA,gBAAeF,EAAGA,EAAIT,EAAOY,OAAQ/B,EAAMK,MAAOL,EAAMO,MACxDI,EAASqB,KAAK,IAAIC,EAAAA,cAAc,CAC5BC,SAAU,GAAFC,OAAK3C,KAAK4C,GAAE,WAAAD,OAAUP,EAAC,MAC/BS,QAASrC,EAAMqC,QACfhC,MAAOuB,EAAID,EAAM,GAAGI,OACpBO,KAAMX,EAAM,GACZpB,IAAKqB,EACLW,QAAS,IAGrB,CACJ,CACJ,CACA5B,EAASC,UAAU,GAE3B,CACA6B,aAAAA,GAAkB,E","sources":["../node_modules/@jbrowse/plugin-sequence/esm/SequenceSearchAdapter/SequenceSearchAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { SimpleFeature, revcom, doesIntersect2, } from '@jbrowse/core/util';\nimport { toArray } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\nexport default class extends BaseFeatureDataAdapter {\n    async configure() {\n        var _a;\n        const adapter = await ((_a = this.getSubAdapter) === null || _a === void 0 ? void 0 : _a.call(this, this.getConf('sequenceAdapter')));\n        if (!adapter) {\n            throw new Error('Error getting subadapter');\n        }\n        return adapter.dataAdapter;\n    }\n    async getRefNames() {\n        const adapter = await this.configure();\n        return adapter.getRefNames();\n    }\n    getFeatures(query, opts) {\n        return ObservableCreate(async (observer) => {\n            var _a;\n            const sequenceAdapter = await this.configure();\n            const hw = 1000;\n            let { start: queryStart, end: queryEnd } = query;\n            queryStart = Math.max(0, queryStart - hw);\n            queryEnd += hw;\n            if (queryEnd < 0 || queryStart > queryEnd) {\n                observer.complete();\n                return;\n            }\n            const ret = sequenceAdapter.getFeatures({\n                ...query,\n                start: queryStart,\n                end: queryEnd,\n            }, opts);\n            const feats = await firstValueFrom(ret.pipe(toArray()));\n            const residues = ((_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq')) || '';\n            const search = this.getConf('search');\n            const searchForward = this.getConf('searchForward');\n            const searchReverse = this.getConf('searchReverse');\n            const caseInsensitive = this.getConf('caseInsensitive');\n            const re = new RegExp(search, 'g' + (caseInsensitive ? 'i' : ''));\n            if (search) {\n                if (searchForward) {\n                    const matches = residues.matchAll(re);\n                    for (const match of matches) {\n                        const s = queryStart + (match.index || 0);\n                        if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-match-${s}-p`,\n                                refName: query.refName,\n                                start: s,\n                                end: s + match[0].length,\n                                name: match[0],\n                                strand: 1,\n                            }));\n                        }\n                    }\n                }\n                if (searchReverse) {\n                    const matches = revcom(residues).matchAll(re);\n                    for (const match of matches) {\n                        const s = queryEnd - (match.index || 0);\n                        if (doesIntersect2(s, s + search.length, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-match-${s}-n`,\n                                refName: query.refName,\n                                start: s - match[0].length,\n                                name: match[0],\n                                end: s,\n                                strand: -1,\n                            }));\n                        }\n                    }\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\n"],"names":["BaseFeatureDataAdapter","configure","_a","adapter","this","getSubAdapter","call","getConf","Error","dataAdapter","getRefNames","getFeatures","query","opts","ObservableCreate","async","sequenceAdapter","start","queryStart","end","queryEnd","Math","max","observer","complete","ret","residues","firstValueFrom","pipe","toArray","get","search","searchForward","searchReverse","caseInsensitive","re","RegExp","matches","matchAll","match","s","index","doesIntersect2","length","next","SimpleFeature","uniqueId","concat","id","refName","name","strand","revcom","freeResources"],"sourceRoot":""}