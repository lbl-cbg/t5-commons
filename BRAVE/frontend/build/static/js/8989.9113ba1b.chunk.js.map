{"version":3,"file":"static/js/8989.9113ba1b.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ExportSvgDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Checkbox, CircularProgress, DialogActions, DialogContent, FormControlLabel, MenuItem, TextField, Typography, } from '@mui/material';\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, useLocalStorage } from '@jbrowse/core/util';\nfunction LoadingMessage() {\n    return (React.createElement(\"div\", null,\n        React.createElement(CircularProgress, { size: 20, style: { marginRight: 20 } }),\n        React.createElement(Typography, { display: \"inline\" }, \"Creating SVG\")));\n}\nfunction useSvgLocal(key, val) {\n    return useLocalStorage('svg-' + key, val);\n}\nexport default function ExportSvgDialog({ model, handleClose, }) {\n    const session = getSession(model);\n    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';\n    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');\n    const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset');\n    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Export SVG\" },\n        React.createElement(DialogContent, null,\n            error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingMessage, null)) : null,\n            React.createElement(TextField, { helperText: \"filename\", value: filename, onChange: event => setFilename(event.target.value) }),\n            React.createElement(\"br\", null),\n            React.createElement(TextField, { select: true, label: \"Track label positioning\", variant: \"outlined\", style: { width: 150 }, value: trackLabels, onChange: event => setTrackLabels(event.target.value) },\n                React.createElement(MenuItem, { value: \"offset\" }, \"Offset\"),\n                React.createElement(MenuItem, { value: \"overlay\" }, \"Overlay\"),\n                React.createElement(MenuItem, { value: \"left\" }, \"Left\"),\n                React.createElement(MenuItem, { value: \"none\" }, \"None\")),\n            React.createElement(\"br\", null),\n            session.allThemes ? (React.createElement(TextField, { select: true, label: \"Theme\", variant: \"outlined\", value: themeName, onChange: event => setThemeName(event.target.value) }, Object.entries(session.allThemes()).map(([key, val]) => (React.createElement(MenuItem, { key: key, value: key }, \n            // @ts-expect-error\n            val.name || '(Unknown name)'))))) : null,\n            offscreenCanvas ? (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rasterizeLayers, onChange: () => setRasterizeLayers(val => !val) }), label: \"Rasterize canvas based tracks? File may be much larger if this is turned off\" })) : (React.createElement(Typography, null, \"Note: rasterizing layers not yet supported in this browser, so SVG size may be large\"))),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => handleClose() }, \"Cancel\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: async () => {\n                    setLoading(true);\n                    setError(undefined);\n                    try {\n                        await model.exportSvg({\n                            rasterizeLayers,\n                            filename,\n                            trackLabels,\n                            themeName,\n                        });\n                        handleClose();\n                    }\n                    catch (e) {\n                        console.error(e);\n                        setError(e);\n                        setLoading(false);\n                    }\n                } }, \"Submit\"))));\n}\n"],"names":["LoadingMessage","React","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDialog","_ref","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","trackLabels","setTrackLabels","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","TextField","helperText","value","onChange","event","target","select","label","variant","width","MenuItem","allThemes","Object","entries","map","_ref2","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}