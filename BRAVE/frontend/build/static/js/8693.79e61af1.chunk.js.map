{"version":3,"file":"static/js/8693.79e61af1.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/BreakendOptionDialog.js","../node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/launchBreakpointSplitView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport { getSession } from '@jbrowse/core/util';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { getBreakpointSplitView } from './launchBreakpointSplitView';\nimport { getSnapshot } from 'mobx-state-tree';\nconst useStyles = makeStyles()({\n    block: {\n        display: 'block',\n    },\n});\nfunction stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nfunction Checkbox2({ checked, label, onChange, }) {\n    const { classes } = useStyles();\n    return (React.createElement(FormControlLabel, { className: classes.block, control: React.createElement(Checkbox, { checked: checked, onChange: onChange }), label: label }));\n}\nconst BreakendOptionDialog = observer(function ({ model, handleClose, f1, f2, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [mirror, setMirror] = useState(true);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Breakpoint split view options\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Checkbox2, { checked: copyTracks, onChange: event => setCopyTracks(event.target.checked), label: \"Copy tracks into the new view\" }),\n            React.createElement(Checkbox2, { checked: mirror, onChange: event => setMirror(event.target.checked), label: \"Mirror tracks vertically in vertically stacked view\" })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    const { view } = model;\n                    const session = getSession(model);\n                    try {\n                        const viewSnapshot = getBreakpointSplitView({ view, f1, f2 });\n                        const [view1, view2] = viewSnapshot.views;\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n                        const viewTracks = getSnapshot(view.tracks);\n                        session.addView('BreakpointSplitView', {\n                            ...viewSnapshot,\n                            views: [\n                                {\n                                    ...view1,\n                                    tracks: stripIds(viewTracks),\n                                    offsetPx: view1.offsetPx - view.width / 2 + 100,\n                                },\n                                {\n                                    ...view2,\n                                    tracks: stripIds(mirror ? [...viewTracks].reverse() : viewTracks),\n                                    offsetPx: view2.offsetPx - view.width / 2 + 100,\n                                },\n                            ],\n                        });\n                    }\n                    catch (e) {\n                        console.error(e);\n                        session.notify(`${e}`);\n                    }\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { onClick: () => handleClose(), color: \"secondary\", variant: \"contained\" }, \"Cancel\"))));\n});\nexport default BreakendOptionDialog;\n","import { getSession } from '@jbrowse/core/util';\nexport function getBreakpointSplitView({ f1, f2, view, }) {\n    const { assemblyName } = view.displayedRegions[0];\n    const { assemblyManager } = getSession(view);\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    const topRegion = assembly.regions.find(f => f.refName === f1.refName);\n    const bottomRegion = assembly.regions.find(f => f.refName === f2.refName);\n    if (!topRegion || !bottomRegion) {\n        throw new Error(`unable to find the refName for the top or bottom of the breakpoint view`);\n    }\n    const topMarkedRegion = [{ ...topRegion }, { ...topRegion }];\n    const bottomMarkedRegion = [{ ...bottomRegion }, { ...bottomRegion }];\n    const s = f1.strand === 1 ? f1.end : f1.start;\n    const e = f2.strand === 1 ? f2.start : f2.end;\n    topMarkedRegion[0].end = s;\n    topMarkedRegion[1].start = s + 1;\n    bottomMarkedRegion[0].end = e;\n    bottomMarkedRegion[1].start = e + 1;\n    const bpPerPx = 10;\n    return {\n        type: 'BreakpointSplitView',\n        views: [\n            {\n                type: 'LinearGenomeView',\n                displayedRegions: topMarkedRegion,\n                hideHeader: true,\n                bpPerPx,\n                offsetPx: (topRegion.start + s) / bpPerPx,\n            },\n            {\n                type: 'LinearGenomeView',\n                displayedRegions: bottomMarkedRegion,\n                hideHeader: true,\n                bpPerPx,\n                offsetPx: (bottomRegion.start + e) / bpPerPx,\n            },\n        ],\n        displayName: `breakend split detail`,\n    };\n}\n"],"names":["useStyles","makeStyles","block","display","stripIds","arr","map","_ref","id","displays","rest","_ref2","Checkbox2","_ref3","checked","label","onChange","classes","React","FormControlLabel","className","control","Checkbox","observer","_ref4","model","handleClose","f1","f2","copyTracks","setCopyTracks","useState","mirror","setMirror","Dialog","open","onClose","title","DialogContent","event","target","DialogActions","Button","onClick","view","session","getSession","viewSnapshot","assemblyName","displayedRegions","assemblyManager","assembly","get","Error","concat","regions","topRegion","find","f","refName","bottomRegion","topMarkedRegion","bottomMarkedRegion","s","strand","end","start","e","type","views","hideHeader","bpPerPx","offsetPx","displayName","getBreakpointSplitView","view1","view2","viewTracks","getSnapshot","tracks","addView","width","reverse","console","error","notify","variant","color","autoFocus"],"sourceRoot":""}