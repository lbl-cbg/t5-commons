{"version":3,"file":"static/js/3123.8a85d7b8.chunk.js","mappings":"8LAKA,SAASA,EAAYC,GACjB,MAAMC,EAAWD,EAAIE,MAAMF,EAAIG,YAAY,KAAO,GAClD,OAAOF,EAASC,MAAM,EAAGD,EAASE,YAAY,KAClD,CACA,MAAMC,UAA2BC,EAAAA,uBAC7B,iBAAMC,GACF,MAAMC,EAAgBC,KAAKD,cAC3B,IAAKA,EACD,MAAM,IAAIE,MAAM,8BAEpB,IAAIC,EAAWF,KAAKG,QAAQ,eAC5B,KAAmB,OAAbD,QAAkC,IAAbA,OAAsB,EAASA,EAASE,QAAS,CAExEF,EADgBF,KAAKG,QAAQ,WACVE,KAAIC,IAAS,CAC5BC,KAAM,gBACNC,OAAQjB,EAAYe,GACpBG,eAAgB,CACZjB,IAAKc,MAGjB,CACA,OAAOI,QAAQC,IAEfT,EAASG,KAAIO,UACT,MAAMC,SAAqBd,EAAce,IACpCD,YACL,MAAO,CACHL,OAAQM,EAAKC,MAAQF,EAAYG,MAC9BF,EACHD,cACH,IAET,CAEA,iBAAMI,CAAYC,GACd,MAAMC,QAAiBnB,KAAKF,cACtBsB,QAAiBV,QAAQC,IAAIQ,EAASd,KAAIgB,GAAKA,EAAER,YAAYI,YAAYC,MAC/E,MAAO,IAAI,IAAII,IAAIF,EAASG,QAChC,CACA,oBAAMC,CAAeN,GACjB,MAAMC,QAAiBnB,KAAKF,cACtB2B,SAAef,QAAQC,IAE7BQ,EAASd,KAAIqB,IAAS,IAAIC,EAAIC,EAAI,OAAwD,QAAhDA,GAAMD,EAAKD,EAAIb,aAAaW,sBAAmC,IAAPI,OAAgB,EAASA,EAAGC,KAAKF,EAAIT,EAAK,MAAOY,QAAOC,KAAOA,IAGjK,MAAO,CAAEC,UAFQC,EAAAA,EAAAA,KAAIR,EAAMpB,KAAI6B,GAAKA,EAAEF,YAEnBG,UADFC,EAAAA,EAAAA,KAAIX,EAAMpB,KAAI6B,GAAKA,EAAEC,YAE1C,CACAE,WAAAA,CAAYC,GAAmB,IAAXpB,EAAIqB,UAAAnC,OAAA,QAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxB,OAAOE,EAAAA,EAAAA,mBAAiB7B,UACpB,MAAMO,QAAiBnB,KAAKF,eAC5B4C,EAAAA,EAAAA,MAASvB,EAASd,KAAIqB,GAAOA,EAAIb,YAAYwB,YAAYC,EAAQpB,GAAMyB,MAAKtC,EAAAA,EAAAA,IAAIuC,GAEhFA,EAAEC,IAAI,UACAD,EACA,IAAIE,EAAAA,cAAc,IACbF,EAAEG,SACLC,SAAU,GAAFC,OAAKvB,EAAIlB,OAAM,KAAAyC,OAAIL,EAAE5B,MAC7BR,OAAQkB,EAAIlB,eACT0C,UAAUC,EAAS,GAC/BjC,EAAKkC,OACZ,CAEA,uCAAMC,CAAkCC,GACpC,MAAO,CAAEC,eAAgB,EAC7B,CAGA,gBAAMC,GAEF,aADuBxD,KAAKF,eACZO,KAAIoD,IAAA,IAAC,YAAE5C,EAAW,OAAEL,EAAM,KAAEO,KAAS2C,GAAMD,EAAA,MAAM,CAC7D1C,KAAMP,EACNmD,OAAQ5C,KACL2C,EACN,GACL,CACAE,aAAAA,GAAkB,EAEtBhE,EAAmBiE,aAAe,CAC9B,gBACA,gBACA,kBAEJ,S","sources":["../node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAdapter/MultiWiggleAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { SimpleFeature, min, max } from '@jbrowse/core/util';\nimport { merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nfunction getFilename(uri) {\n    const filename = uri.slice(uri.lastIndexOf('/') + 1);\n    return filename.slice(0, filename.lastIndexOf('.'));\n}\nclass MultiWiggleAdapter extends BaseFeatureDataAdapter {\n    async getAdapters() {\n        const getSubAdapter = this.getSubAdapter;\n        if (!getSubAdapter) {\n            throw new Error('no getSubAdapter available');\n        }\n        let subConfs = this.getConf('subadapters');\n        if (!(subConfs === null || subConfs === void 0 ? void 0 : subConfs.length)) {\n            const entries = this.getConf('bigWigs');\n            subConfs = entries.map(entry => ({\n                type: 'BigWigAdapter',\n                source: getFilename(entry),\n                bigWigLocation: {\n                    uri: entry,\n                },\n            }));\n        }\n        return Promise.all(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        subConfs.map(async (conf) => {\n            const dataAdapter = (await getSubAdapter(conf))\n                .dataAdapter;\n            return {\n                source: conf.name || dataAdapter.id,\n                ...conf,\n                dataAdapter,\n            };\n        }));\n    }\n    // note: can't really have dis-agreeing refNames\n    async getRefNames(opts) {\n        const adapters = await this.getAdapters();\n        const allNames = await Promise.all(adapters.map(a => a.dataAdapter.getRefNames(opts)));\n        return [...new Set(allNames.flat())];\n    }\n    async getGlobalStats(opts) {\n        const adapters = await this.getAdapters();\n        const stats = (await Promise.all(\n        // @ts-expect-error\n        adapters.map(adp => { var _a, _b; return (_b = (_a = adp.dataAdapter).getGlobalStats) === null || _b === void 0 ? void 0 : _b.call(_a, opts); }))).filter(f => !!f);\n        const scoreMin = min(stats.map(s => s.scoreMin));\n        const scoreMax = max(stats.map(s => s.scoreMax));\n        return { scoreMin, scoreMax };\n    }\n    getFeatures(region, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const adapters = await this.getAdapters();\n            merge(...adapters.map(adp => adp.dataAdapter.getFeatures(region, opts).pipe(map(p => \n            // add source field if it does not exist\n            p.get('source')\n                ? p\n                : new SimpleFeature({\n                    ...p.toJSON(),\n                    uniqueId: `${adp.source}-${p.id()}`,\n                    source: adp.source,\n                }))))).subscribe(observer);\n        }, opts.signal);\n    }\n    // always render bigwig instead of calculating a feature density for it\n    async getMultiRegionFeatureDensityStats(_regions) {\n        return { featureDensity: 0 };\n    }\n    // in another adapter type, this could be dynamic depending on region or\n    // something, but it is static for this particular multi-wiggle adapter type\n    async getSources() {\n        const adapters = await this.getAdapters();\n        return adapters.map(({ dataAdapter, source, name, ...rest }) => ({\n            name: source,\n            __name: name,\n            ...rest,\n        }));\n    }\n    freeResources() { }\n}\nMultiWiggleAdapter.capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n];\nexport default MultiWiggleAdapter;\n"],"names":["getFilename","uri","filename","slice","lastIndexOf","MultiWiggleAdapter","BaseFeatureDataAdapter","getAdapters","getSubAdapter","this","Error","subConfs","getConf","length","map","entry","type","source","bigWigLocation","Promise","all","async","dataAdapter","conf","name","id","getRefNames","opts","adapters","allNames","a","Set","flat","getGlobalStats","stats","adp","_a","_b","call","filter","f","scoreMin","min","s","scoreMax","max","getFeatures","region","arguments","undefined","ObservableCreate","merge","pipe","p","get","SimpleFeature","toJSON","uniqueId","concat","subscribe","observer","signal","getMultiRegionFeatureDensityStats","_regions","featureDensity","getSources","_ref","rest","__name","freeResources","capabilities"],"sourceRoot":""}