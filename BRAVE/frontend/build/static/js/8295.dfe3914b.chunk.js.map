{"version":3,"file":"static/js/8295.dfe3914b.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyTable.js","../node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyAddForm.js","../node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyEditor.js","../node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyManager.js","../node_modules/@mui/icons-material/Create.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, } from '@mui/material';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nimport CreateIcon from '@mui/icons-material/Create';\nimport DeleteIcon from '@mui/icons-material/Delete';\nconst AssemblyTable = observer(function ({ rootModel, setIsAssemblyBeingEdited, setAssemblyBeingEdited, }) {\n    function removeAssembly(name) {\n        rootModel.jbrowse.removeAssemblyConf(name);\n    }\n    const { assemblies } = rootModel.jbrowse;\n    return (React.createElement(TableContainer, { component: Paper },\n        React.createElement(Table, null,\n            React.createElement(TableHead, null,\n                React.createElement(TableRow, null,\n                    React.createElement(TableCell, null, \"Name\"),\n                    React.createElement(TableCell, null, \"Display name\"),\n                    React.createElement(TableCell, null, \"Aliases\"),\n                    React.createElement(TableCell, null, \"Actions\"))),\n            React.createElement(TableBody, null, assemblies.map(assembly => {\n                const name = readConfObject(assembly, 'name');\n                const displayName = readConfObject(assembly, 'displayName');\n                const aliases = readConfObject(assembly, 'aliases');\n                return (React.createElement(TableRow, { key: name },\n                    React.createElement(TableCell, null, name),\n                    React.createElement(TableCell, null, displayName),\n                    React.createElement(TableCell, null, aliases ? aliases.toString() : ''),\n                    React.createElement(TableCell, null,\n                        React.createElement(IconButton, { \"data-testid\": `${name}-edit`, onClick: () => {\n                                setIsAssemblyBeingEdited(true);\n                                setAssemblyBeingEdited(assembly);\n                            } },\n                            React.createElement(CreateIcon, { color: \"primary\" })),\n                        React.createElement(IconButton, { \"data-testid\": `${name}-delete`, onClick: () => removeAssembly(name) },\n                            React.createElement(DeleteIcon, { color: \"error\" })))));\n            })))));\n});\nexport default AssemblyTable;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Grid, MenuItem, Paper, TextField } from '@mui/material';\nimport { FileSelector } from '@jbrowse/core/ui';\n// icons\nimport AddIcon from '@mui/icons-material/Add';\nconst AdapterSelector = observer(function ({ adapterSelection, setAdapterSelection, adapterTypes, }) {\n    return (React.createElement(TextField, { value: adapterSelection, label: \"Type\", select: true, helperText: \"Type of adapter to use\", fullWidth: true, onChange: event => setAdapterSelection(event.target.value) }, adapterTypes.map(str => (React.createElement(MenuItem, { key: str, value: str }, str)))));\n});\nconst AdapterInput = observer(({ adapterSelection, fastaLocation, setFastaLocation, faiLocation, setFaiLocation, gziLocation, setGziLocation, twoBitLocation, setTwoBitLocation, chromSizesLocation, setChromSizesLocation, }) => {\n    if (adapterSelection === 'IndexedFastaAdapter' ||\n        adapterSelection === 'BgzipFastaAdapter') {\n        return (React.createElement(Grid, { container: true, spacing: 2 },\n            React.createElement(Grid, { item: true },\n                React.createElement(FileSelector, { name: \"fastaLocation\", location: fastaLocation, setLocation: loc => setFastaLocation(loc) })),\n            React.createElement(Grid, { item: true },\n                React.createElement(FileSelector, { name: \"faiLocation\", location: faiLocation, setLocation: loc => setFaiLocation(loc) })),\n            adapterSelection === 'BgzipFastaAdapter' ? (React.createElement(Grid, { item: true },\n                React.createElement(FileSelector, { name: \"gziLocation\", location: gziLocation, setLocation: loc => setGziLocation(loc) }))) : null));\n    }\n    if (adapterSelection === 'TwoBitAdapter') {\n        return (React.createElement(Grid, { container: true, spacing: 2 },\n            React.createElement(Grid, { item: true },\n                React.createElement(FileSelector, { name: \"twoBitLocation\", location: twoBitLocation, setLocation: loc => setTwoBitLocation(loc) })),\n            React.createElement(Grid, { item: true },\n                React.createElement(FileSelector, { name: \"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\", location: chromSizesLocation, setLocation: loc => setChromSizesLocation(loc) }))));\n    }\n    return null;\n});\nconst blank = { uri: '' };\nconst AssemblyAddForm = observer(function ({ rootModel, setFormOpen, }) {\n    const adapterTypes = [\n        'IndexedFastaAdapter',\n        'BgzipFastaAdapter',\n        'TwoBitAdapter',\n    ];\n    const [assemblyName, setAssemblyName] = useState('');\n    const [assemblyDisplayName, setAssemblyDisplayName] = useState('');\n    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0]);\n    const [fastaLocation, setFastaLocation] = useState(blank);\n    const [faiLocation, setFaiLocation] = useState(blank);\n    const [gziLocation, setGziLocation] = useState(blank);\n    const [twoBitLocation, setTwoBitLocation] = useState(blank);\n    const [chromSizesLocation, setChromSizesLocation] = useState(blank);\n    function createAssembly() {\n        if (assemblyName === '') {\n            rootModel.session.notify(\"Can't create an assembly without a name\");\n        }\n        else {\n            setFormOpen(false);\n            let newAssembly;\n            if (adapterSelection === 'IndexedFastaAdapter') {\n                newAssembly = {\n                    name: assemblyName,\n                    displayName: assemblyDisplayName,\n                    sequence: {\n                        adapter: {\n                            type: 'IndexedFastaAdapter',\n                            fastaLocation,\n                            faiLocation,\n                        },\n                    },\n                };\n            }\n            else if (adapterSelection === 'BgzipFastaAdapter') {\n                newAssembly = {\n                    name: assemblyName,\n                    displayName: assemblyDisplayName,\n                    sequence: {\n                        adapter: {\n                            type: 'BgzipFastaAdapter',\n                            fastaLocation,\n                            faiLocation,\n                            gziLocation,\n                        },\n                    },\n                };\n            }\n            else if (adapterSelection === 'TwoBitAdapter') {\n                newAssembly = {\n                    name: assemblyName,\n                    displayName: assemblyDisplayName,\n                    sequence: {\n                        adapter: {\n                            type: 'TwoBitAdapter',\n                            twoBitLocation,\n                            chromSizesLocation,\n                        },\n                    },\n                };\n            }\n            rootModel.jbrowse.addAssemblyConf(newAssembly);\n            rootModel.session.notify(`Successfully added ${assemblyName} assembly to JBrowse 2`, 'success');\n        }\n    }\n    return (React.createElement(\"div\", null,\n        React.createElement(Paper, null,\n            React.createElement(TextField, { id: \"assembly-name\", inputProps: { 'data-testid': 'assembly-name' }, label: \"Assembly name\", helperText: \"The assembly name e.g. hg38\", variant: \"outlined\", value: assemblyName, onChange: event => setAssemblyName(event.target.value) }),\n            React.createElement(TextField, { id: \"assembly-name\", inputProps: { 'data-testid': 'assembly-display-name' }, label: \"Assembly display name\", helperText: 'A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"', variant: \"outlined\", value: assemblyDisplayName, onChange: event => setAssemblyDisplayName(event.target.value) }),\n            React.createElement(AdapterSelector, { adapterSelection: adapterSelection, setAdapterSelection: setAdapterSelection, adapterTypes: adapterTypes }),\n            React.createElement(AdapterInput, { adapterSelection: adapterSelection, fastaLocation: fastaLocation, setFastaLocation: setFastaLocation, faiLocation: faiLocation, setFaiLocation: setFaiLocation, gziLocation: gziLocation, setGziLocation: setGziLocation, twoBitLocation: twoBitLocation, setTwoBitLocation: setTwoBitLocation, chromSizesLocation: chromSizesLocation, setChromSizesLocation: setChromSizesLocation })),\n        React.createElement(Button, { variant: \"contained\", color: \"secondary\", startIcon: React.createElement(AddIcon, null), onClick: createAssembly }, \"Create new assembly\")));\n});\nexport default AssemblyAddForm;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n        maxHeight: 600,\n    },\n});\nconst AssemblyEditor = observer(function ({ assembly, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"div\", { className: classes.container }, assembly ? (React.createElement(ConfigurationEditor, { model: { target: assembly } })) : (React.createElement(\"div\", null, \"No assembly\"))));\n});\nexport default AssemblyEditor;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\n// icons\nimport AddIcon from '@mui/icons-material/Add';\n// locals\nimport AssemblyTable from './AssemblyTable';\nimport AssemblyAddForm from './AssemblyAddForm';\nimport AssemblyEditor from './AssemblyEditor';\nconst AssemblyManager = observer(function ({ rootModel, onClose, }) {\n    const [isFormOpen, setFormOpen] = useState(false);\n    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false);\n    const [assemblyBeingEdited, setAssemblyBeingEdited] = useState();\n    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited;\n    return (React.createElement(Dialog, { open: true, onClose: () => onClose(false), title: \"Assembly manager\" },\n        React.createElement(DialogContent, null,\n            showAssemblyTable ? (React.createElement(AssemblyTable, { rootModel: rootModel, setIsAssemblyBeingEdited: setIsAssemblyBeingEdited, setAssemblyBeingEdited: setAssemblyBeingEdited })) : null,\n            isAssemblyBeingEdited ? (React.createElement(AssemblyEditor, { assembly: assemblyBeingEdited })) : null,\n            isFormOpen ? (React.createElement(AssemblyAddForm, { rootModel: rootModel, setFormOpen: setFormOpen })) : null),\n        React.createElement(DialogActions, null,\n            isFormOpen ? (React.createElement(Button, { variant: \"contained\", onClick: () => setFormOpen(false) }, \"Back\")) : null,\n            isAssemblyBeingEdited ? (React.createElement(Button, { variant: \"contained\", onClick: () => setIsAssemblyBeingEdited(false) }, \"Back\")) : null,\n            showAssemblyTable ? (React.createElement(React.Fragment, null,\n                React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => onClose(false) }, \"Close\"),\n                React.createElement(Button, { variant: \"contained\", startIcon: React.createElement(AddIcon, null), onClick: () => setFormOpen(true) }, \"Add new assembly\"))) : null)));\n});\nexport default AssemblyManager;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Create');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["observer","_ref","rootModel","setIsAssemblyBeingEdited","setAssemblyBeingEdited","assemblies","jbrowse","React","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","assembly","name","readConfObject","displayName","aliases","key","toString","IconButton","concat","onClick","CreateIcon","color","removeAssemblyConf","removeAssembly","DeleteIcon","AdapterSelector","adapterSelection","setAdapterSelection","adapterTypes","TextField","value","label","select","helperText","fullWidth","onChange","event","target","str","MenuItem","AdapterInput","_ref2","fastaLocation","setFastaLocation","faiLocation","setFaiLocation","gziLocation","setGziLocation","twoBitLocation","setTwoBitLocation","chromSizesLocation","setChromSizesLocation","Grid","container","spacing","item","FileSelector","location","setLocation","loc","blank","uri","_ref3","setFormOpen","assemblyName","setAssemblyName","useState","assemblyDisplayName","setAssemblyDisplayName","id","inputProps","variant","Button","startIcon","AddIcon","session","notify","newAssembly","sequence","adapter","type","addAssemblyConf","useStyles","makeStyles","overflow","maxHeight","classes","className","ConfigurationEditor","model","onClose","isFormOpen","isAssemblyBeingEdited","assemblyBeingEdited","showAssemblyTable","Dialog","open","title","DialogContent","AssemblyTable","AssemblyEditor","AssemblyAddForm","DialogActions","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}