{"version":3,"file":"static/js/5971.441e260f.chunk.js","mappings":"yMAOA,MAAMA,UAAwBC,EAAAA,uBAC1BC,WAAAA,CAAYC,EAAQC,EAAeC,GAC/BC,MAAMH,EAAQC,EAAeC,GAC7B,MAAME,EAAWC,KAAKC,QAAQ,iBACxBC,EAAOF,KAAKC,QAAQ,CAAC,QAAS,cAC9BE,EAAMH,KAAKC,QAAQ,CAAC,QAAS,aAC7BG,EAAUJ,KAAKC,QAAQ,WACvBI,EAAKL,KAAKH,cAChBG,KAAKM,IAAM,IAAIC,EAAAA,GAAiB,CAC5BC,YAAYC,EAAAA,EAAAA,cAAaV,EAAUM,GACnCK,cAAwB,QAATR,GAAiBO,EAAAA,EAAAA,cAAaN,EAAKE,QAAMM,EACxDC,cAAwB,QAATV,GAAiBO,EAAAA,EAAAA,cAAaN,EAAKE,QAAMM,EACxDE,eAAgB,WAEpBb,KAAKc,YAAcd,KAAKC,QAAQ,eAChCD,KAAKe,YAAcf,KAAKC,QAAQ,eAChCD,KAAKgB,OAAS,IAAIC,EAAAA,EAAI,CAAEb,WAC5B,CACA,iBAAMc,GAAuB,IAAXC,EAAIC,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAOpB,KAAKM,IAAIgB,0BAA0BH,EAC9C,CACA,eAAMI,GACF,OAAOvB,KAAKM,IAAIiB,WACpB,CACA,cAAMC,GACF,GAAIxB,KAAKc,YAAYO,OACjB,OAAOrB,KAAKc,YAEhB,MAEMW,SAFezB,KAAKM,IAAIiB,aACVG,MAAM,cAAcC,QAAOC,KAAOA,IACjCC,IAAI,GACzB,OAAoB,OAAZJ,QAAgC,IAAZA,OAAqB,EAASA,EAAQK,SAAS,OACrEL,EACGM,MAAM,GACNL,MAAM,MACNM,KAAIJ,GAAKA,EAAEK,cACdtB,CACV,CACAuB,WAAAA,CAAYC,GAAkB,IAAXhB,EAAIC,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvB,OAAOgB,EAAAA,EAAAA,mBAAiBC,UACpB,MAAMC,QAAatC,KAAKM,IAAIiC,eACtB,cAAEC,GAAkBF,EACpBG,EAASD,EAAcE,IAAM,EAC7BC,EAAWH,EAAcI,MAAQ,EACjCC,EAASL,EAAcM,IAAM,EAI7BC,QAAc/C,KAAKwB,iBACnBxB,KAAKM,IAAI0C,SAASb,EAAMc,QAASd,EAAMS,MAAOT,EAAMW,IAAK,CAC3DI,aAAcA,CAACC,EAAMC,KACjBC,EAASC,MAAKC,EAAAA,EAAAA,GAAYJ,EAAMV,EAAQE,EAAUE,EAAQ7C,KAAKe,YAAaf,KAAKgB,OAAQ,GAAFwC,OAAKxD,KAAKyD,GAAE,KAAAD,OAAIJ,GAAcL,GAAO,EAEhIW,OAAQvC,EAAKuC,SAEjBL,EAASM,UAAU,GACpBxC,EAAKuC,OACZ,CACAE,aAAAA,GAAkB,EAEtBpE,EAAgBqE,aAAe,CAAC,cAAe,eAC/C,S","sources":["../node_modules/@jbrowse/plugin-bed/esm/BedTabixAdapter/BedTabixAdapter.js"],"sourcesContent":["import BED from '@gmod/bed';\nimport { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { TabixIndexedFile } from '@gmod/tabix';\n// locals\nimport { featureData } from '../util';\nclass BedTabixAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const bedGzLoc = this.getConf('bedGzLocation');\n        const type = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const autoSql = this.getConf('autoSql');\n        const pm = this.pluginManager;\n        this.bed = new TabixIndexedFile({\n            filehandle: openLocation(bedGzLoc, pm),\n            csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n            tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n        this.columnNames = this.getConf('columnNames');\n        this.scoreColumn = this.getConf('scoreColumn');\n        this.parser = new BED({ autoSql });\n    }\n    async getRefNames(opts = {}) {\n        return this.bed.getReferenceSequenceNames(opts);\n    }\n    async getHeader() {\n        return this.bed.getHeader();\n    }\n    async getNames() {\n        if (this.columnNames.length) {\n            return this.columnNames;\n        }\n        const header = await this.bed.getHeader();\n        const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const defline = defs.at(-1);\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(f => f.trim())\n            : undefined;\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const meta = await this.bed.getMetadata();\n            const { columnNumbers } = meta;\n            const colRef = columnNumbers.ref - 1;\n            const colStart = columnNumbers.start - 1;\n            const colEnd = columnNumbers.end - 1;\n            // colSame handles special case for tabix where a single column is both\n            // the start and end, this is assumed to be covering the base at this\n            // position (e.g. tabix -s 1 -b 2 -e 2) begin and end are same\n            const names = await this.getNames();\n            await this.bed.getLines(query.refName, query.start, query.end, {\n                lineCallback: (line, fileOffset) => {\n                    observer.next(featureData(line, colRef, colStart, colEnd, this.scoreColumn, this.parser, `${this.id}-${fileOffset}`, names));\n                },\n                signal: opts.signal,\n            });\n            observer.complete();\n        }, opts.signal);\n    }\n    freeResources() { }\n}\nBedTabixAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default BedTabixAdapter;\n"],"names":["BedTabixAdapter","BaseFeatureDataAdapter","constructor","config","getSubAdapter","pluginManager","super","bedGzLoc","this","getConf","type","loc","autoSql","pm","bed","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","columnNames","scoreColumn","parser","BED","getRefNames","opts","arguments","length","getReferenceSequenceNames","getHeader","getNames","defline","split","filter","f","at","includes","slice","map","trim","getFeatures","query","ObservableCreate","async","meta","getMetadata","columnNumbers","colRef","ref","colStart","start","colEnd","end","names","getLines","refName","lineCallback","line","fileOffset","observer","next","featureData","concat","id","signal","complete","freeResources","capabilities"],"sourceRoot":""}