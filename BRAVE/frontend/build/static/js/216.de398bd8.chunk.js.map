{"version":3,"file":"static/js/216.de398bd8.chunk.js","mappings":"yQAIA,SAASA,IACL,OAAQC,EAAAA,cAAoB,MAAO,KAC/BA,EAAAA,cAAoBC,EAAAA,EAAkB,CAAEC,KAAM,GAAIC,MAAO,CAAEC,YAAa,MACxEJ,EAAAA,cAAoBK,EAAAA,EAAY,CAAEC,QAAS,UAAY,gBAC/D,CACA,SAASC,EAAYC,EAAKC,GACtB,OAAOC,EAAAA,EAAAA,iBAAgB,OAASF,EAAKC,EACzC,CACe,SAASE,EAAeC,GAA0B,IAAzB,MAAEC,EAAK,YAAEC,GAAcF,EAC3D,MAAMG,GAAUC,EAAAA,EAAAA,YAAWH,GACrBI,EAA6C,qBAApBC,iBACxBC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASJ,IAChDK,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,aACnBK,EAAUC,GAAepB,EAAY,OAAQ,gBAC7CqB,EAAWC,GAAgBtB,EAAY,QAASQ,EAAQa,WAAa,WAC5E,OAAQ5B,EAAAA,cAAoB8B,EAAAA,OAAQ,CAAEC,MAAM,EAAMC,QAASlB,EAAamB,MAAO,cAC3EjC,EAAAA,cAAoBkC,EAAAA,EAAe,KAC/BV,EAASxB,EAAAA,cAAoBmC,EAAAA,aAAc,CAAEX,MAAOA,IAAYF,EAAWtB,EAAAA,cAAoBD,EAAgB,MAAS,KACxHC,EAAAA,cAAoBoC,EAAAA,EAAW,CAAEC,WAAY,WAAYC,MAAOZ,EAAUa,SAAUC,GAASb,EAAYa,EAAMC,OAAOH,SACtHtC,EAAAA,cAAoB,KAAM,MAC1Be,EAAQ2B,UAAa1C,EAAAA,cAAoBoC,EAAAA,EAAW,CAAEO,QAAQ,EAAMC,MAAO,QAASN,MAAOV,EAAWW,SAAUC,GAASX,EAAaW,EAAMC,OAAOH,QAAUO,OAAOC,QAAQ/B,EAAQ2B,aAAaK,KAAIC,IAAA,IAAExC,EAAKC,GAAIuC,EAAA,OAAMhD,EAAAA,cAAoBiD,EAAAA,EAAU,CAAEzC,IAAKA,EAAK8B,MAAO9B,GAEvQC,EAAIyC,MAAQ,iBAAiB,KAAO,KACpCjC,EAAmBjB,EAAAA,cAAoBmD,EAAAA,EAAkB,CAAEC,QAASpD,EAAAA,cAAoBqD,EAAAA,EAAU,CAAEC,QAASnC,EAAiBoB,SAAUA,IAAMnB,GAAmBX,IAAQA,MAASmC,MAAO,iFAAsF5C,EAAAA,cAAoBK,EAAAA,EAAY,KAAM,yFACzTL,EAAAA,cAAoBuD,EAAAA,EAAe,KAC/BvD,EAAAA,cAAoBwD,EAAAA,EAAQ,CAAEC,QAAS,YAAaC,MAAO,YAAaC,QAASA,IAAM7C,KAAiB,UACxGd,EAAAA,cAAoBwD,EAAAA,EAAQ,CAAEC,QAAS,YAAaC,MAAO,UAAWE,KAAM,SAAUD,QAASE,UACvFtC,GAAW,GACXE,OAASqC,GACT,UACUjD,EAAMkD,UAAU,CAClB5C,kBACAO,WACAE,cAEJd,GACJ,CACA,MAAOkD,GACHC,QAAQzC,MAAMwC,GACdvC,EAASuC,GACTzC,GAAW,EACf,IACC,WACrB,C","sources":["../node_modules/@jbrowse/plugin-circular-view/esm/CircularView/components/ExportSvgDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Checkbox, CircularProgress, DialogActions, DialogContent, FormControlLabel, MenuItem, TextField, Typography, } from '@mui/material';\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, useLocalStorage } from '@jbrowse/core/util';\nfunction LoadingMessage() {\n    return (React.createElement(\"div\", null,\n        React.createElement(CircularProgress, { size: 20, style: { marginRight: 20 } }),\n        React.createElement(Typography, { display: \"inline\" }, \"Creating SVG\")));\n}\nfunction useSvgLocal(key, val) {\n    return useLocalStorage('svg-' + key, val);\n}\nexport default function ExportSvgDialog({ model, handleClose, }) {\n    const session = getSession(model);\n    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';\n    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');\n    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Export SVG\" },\n        React.createElement(DialogContent, null,\n            error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingMessage, null)) : null,\n            React.createElement(TextField, { helperText: \"filename\", value: filename, onChange: event => setFilename(event.target.value) }),\n            React.createElement(\"br\", null),\n            session.allThemes ? (React.createElement(TextField, { select: true, label: \"Theme\", value: themeName, onChange: event => setThemeName(event.target.value) }, Object.entries(session.allThemes()).map(([key, val]) => (React.createElement(MenuItem, { key: key, value: key }, \n            // @ts-expect-error\n            val.name || '(Unknown name)'))))) : null,\n            offscreenCanvas ? (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rasterizeLayers, onChange: () => setRasterizeLayers(val => !val) }), label: \"Rasterize canvas based tracks? File may be much larger if this is turned off\" })) : (React.createElement(Typography, null, \"Note: rasterizing layers not yet supported in this browser, so SVG size may be large\"))),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => handleClose() }, \"Cancel\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: async () => {\n                    setLoading(true);\n                    setError(undefined);\n                    try {\n                        await model.exportSvg({\n                            rasterizeLayers,\n                            filename,\n                            themeName,\n                        });\n                        handleClose();\n                    }\n                    catch (e) {\n                        console.error(e);\n                        setError(e);\n                        setLoading(false);\n                    }\n                } }, \"Submit\"))));\n}\n"],"names":["LoadingMessage","React","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDialog","_ref","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","TextField","helperText","value","onChange","event","target","allThemes","select","label","Object","entries","map","_ref2","MenuItem","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","variant","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}