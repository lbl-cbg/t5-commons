import requests 
import json
from django.conf import settings
import base64 
import re
import os


class CSBIDTask:    

    ANL_TOKEN = os.environ.get("ANL_API_TOKEN")
    JIRA_API_TOKEN_YONG = os.environ.get("JIRA_API_TOKEN_YONG")
    username = "yong@lbl.gov"
    credentials = f'{username}:{JIRA_API_TOKEN_YONG}'
    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8') 
    jira_servicedeskapi_url = 'https://taskforce5.atlassian.net/rest/servicedeskapi/assets/workspace' 

    def __init__(self):
        self.workspace_id = self.get_workspace_id()
        self.base_url = self.get_base_url(self.workspace_id)


    def get_workspace_id(self):
        response = requests.get(self.jira_servicedeskapi_url, 
                                headers={'Content-Type': 'application/json', 
                                        'authorization': 'Basic ' + self.encoded_credentials})
        workspaces_response_json = response.json() 
        print("JIRA workspaces:", workspaces_response_json)
        return workspaces_response_json["values"][0]["workspaceId"]
 

    def get_base_url(self, workspace_id):
        return f'https://api.atlassian.com/jsm/assets/workspace/{workspace_id}/v1'
 

    def run(self):
        #return None
        #self.delete_jira_record(97)

        targets_json = self.get_data();
        return targets_json
        create_record_response = self.create_new_jira_record(targets_json["targets"]);
        return create_record_response
    

    def get_data(self):
        print('Get data...') 
        login_endpoint = 'https://sg.bio.anl.gov/intranet/utilities/servers/apilogin.aspx'
        braveapi_endpoint = 'https://sg.bio.anl.gov/intranet/utilities/servers/apibrave.aspx'
        
        # the below is a token for Yeongshnn (generated by Gyorgy)
        api_key = self.ANL_TOKEN
        response = requests.get(login_endpoint, headers={'Accept': 'application/json', 'authorization': 'Bearer ' + api_key})
        response_json = response.json()

        sessionid = ''

        if 'data' in response_json:
            # get sessionid
            sessionid = response_json['data']['sessionid']

        else:
            print ('Could not get sessionid')

        # print sessionid
        print('\n', 'sessionid:' , sessionid)
        
        # the possible actions for now: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\', \'crystalsummary\']
        # assemble JSON object
        print("Get Targets...")
        json_to_get_targets = '{"data" : [{"apiaction" : "targetsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_targets)
        #print(response.text)
        targets_json = response.json()
        return targets_json

        print("Get Constructs...")
        json_to_get_constructs = '{"data" : [{"apiaction" : "constructsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_constructs)
        print(response.text)
        constructs_json = response.json()

        print("Get Purified Proteins...")
        json_to_get_purifiedproteins = '{"data" : [{"apiaction" : "purifiedproteinsummary", "metadata" :"possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_purifiedproteins)
        print(response.text)
        purifiedproteins_json = response.json()

        print("Get All Purified Proteins...")
        json_to_get_allpurifiedproteins = '{"data" : [{"apiaction" : "allpurifiedproteinsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_allpurifiedproteins)
        print(response.text)
        allpurifiedproteins_json = response.json()

        print("Get All Crystal Summary...")
        json_to_get_allcrystalsummary = '{"data" : [{"apiaction" : "allcrystalsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_allcrystalsummary)
        print(response.text)
        allcrystalsummary_json = response.json()

        print("Get Crystal Summary...")
        json_to_get_crystalsummary = '{"data" : [{"apiaction" : "crystalsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
        response = requests.post(braveapi_endpoint, data = json_to_get_crystalsummary)
        print(response.text)
        crystalsummary_json = response.json()
    

    def create_new_jira_record(self, data):

        for data_item in data:
            found = self.check_jira_record_exit(data_item)
            if not found:
                print("not found, create new...")
                self.push_new_record(data_item)

        return None


    def push_new_record(self, data):
        print("Create new jira record...") 
         
        print("target_id: "+data["targets"][0]["targetid"])
        attributes_data = [
            {
                    "objectTypeAttributeId": "96",  # Attribute ID for Targetid
                    "objectAttributeValues": [
                        {
                            "value": data["targets"][0]["targetid"] # Setting the value for Targetid to UNIQUEID123
                        }
                    ]
            }
        ]

        create_data = {
            "objectTypeId": "9",  # Create a "Target" object
            "attributes": attributes_data,
            "hasAvatar": False  # Optional avatar
        }

        base_url = f'{self.base_url}/object/create'
        headers = {
                    'Authorization': f'Basic {self.encoded_credentials}',
                    'Content-Type': 'application/json'
        }

        # Perform the POST request to create a new asset record
        create_response = requests.post(base_url, headers=headers, data=json.dumps(create_data))

        # Check the response and handle accordingly
        if create_response.status_code in [200, 201]:
            create_results = create_response.json()
            print("Asset creation successful:", create_results)
            return create_results
        else:
            print("Failed to create asset:", create_response.status_code, create_response.text)
            return None
    

    def check_jira_record_exit(self, data_item):
        print("target_id:",data_item["targetid"])

        headers = {
            'Authorization': f'Basic {self.encoded_credentials}',
            'Content-Type': 'application/json'
        }
        # IQL search query
        iql_query = f'Targetid == "{data_item["targetid"]}" '
        search_url = f'{self.base_url}/object/aql'
        search_data = {
            "qlQuery": iql_query
        }

        # Perform the IQL search\
        search_response = requests.post(search_url, headers=headers, data=json.dumps(search_data))
        if search_response.status_code == 200:
            search_results = search_response.json()
            if 'values' in search_results and len(search_results['values']) > 0: 
                print("found")#print("Search results:", search_results['values'])
                return True
            else:
                print("No objects found with the specified query.")
                return False
        else:
            print("Search failed:", search_response.status_code, search_response.text)
            return False
        

    def delete_jira_record(self, record_id):
        print("delete:",record_id)

        headers = {
            'Authorization': f'Basic {self.encoded_credentials}',
            'Content-Type': 'application/json'
        } 
        delete_url = f'{self.base_url}/object/{record_id}'

        # Perform Delete
        delete_response = requests.delete(delete_url, headers=headers)
        if delete_response.status_code == 204:
            print("delete response:", delete_response.json() )
            return True
        elif delete_response.status_code == 200:
            print("delete response:", delete_response.json() )
            return True
        else:
            print("Delete failed:", delete_response.status_code, delete_response.text)
            return False
        

            

    '''
    print('CSBID run task...') 
    jira_servicedeskapi_url = 'https://taskforce5.atlassian.net/rest/servicedeskapi/assets/workspace'  
    response = requests.get(jira_servicedeskapi_url, 
                            headers={'Content-Type': 'application/json', 
                                    'authorization': 'Basic '+ self.encoded_credentials})
    workspaces_response_json = response.json()
    print(workspaces_response_json["values"])
    print(workspaces_response_json)


    workspace_id = workspaces_response_json["values"][0]["workspaceId"]
    jira_servicedeskapi_url = "https://api.atlassian.com/jsm/assets/workspace/" + workspace_id + "/v1/objectschema/list"
    response = requests.get(jira_servicedeskapi_url, 
                            headers={'Content-Type': 'application/json', 
                                    'authorization': 'Basic '+ self.encoded_credentials})

    print(response.json())

    #update assets
    base_url = f'https://api.atlassian.com/jsm/assets/workspace/{workspace_id}/v1'
    
    return update_response.json()
    '''

    '''
    req = urllib.request.Request(jira_servicedeskapi_url, 
                                headers={'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
                                        'Content-Type':'application/json', 
                                        'authorization':'Basic ' + jira_servicedeskapi_token}) 
    response = urllib.request.urlopen(req)
    content = response.read().decode(response.info().get_param('charset') or 'utf-8')
    print(content) 
    ''' 

    '''
    print("ANL============")
    req = urllib.request.Request(login_endpoint, headers={'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11','Accept':'application/json', 'authorization':'Bearer ' + api_key})
    #req.add_header('Accept', 'application/json')
    #req.add_header('authorization', 'Bearer ' + api_key)
    response = urllib.request.urlopen(req)
    content = response.read().decode(response.info().get_param('charset') or 'utf-8')
    response_json = json.loads(content)
    print(content) 
    sessionid = response_json['data']['sessionid']
    print(sessionid) 
    print("ANL<===========")
    '''