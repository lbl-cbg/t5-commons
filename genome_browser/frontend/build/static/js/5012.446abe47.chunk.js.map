{"version":3,"file":"static/js/5012.446abe47.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConfigureConnection.js","../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConnectionTypeSelect.js","../node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/AddConnectionWidget.js","../node_modules/@mui/icons-material/OpenInNew.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { observer } from 'mobx-react';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nconst ConfigureConnection = observer(function ({ connectionType, model, session, }) {\n    const ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;\n    return (React.createElement(Suspense, { fallback: React.createElement(LoadingEllipses, null) },\n        React.createElement(ConfigEditorComponent, { model: { target: model }, session: session })));\n});\nexport default ConfigureConnection;\n","import React, { useEffect } from 'react';\nimport { IconButton, MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\n// icons\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({ connectionTypeChoices, connectionType, setConnectionType, }) {\n    const firstChoice = connectionTypeChoices[0];\n    useEffect(() => {\n        if (!connectionType) {\n            setConnectionType(firstChoice);\n        }\n    }, [connectionType, firstChoice, setConnectionType]);\n    return (React.createElement(\"form\", { autoComplete: \"off\" }, connectionType ? (React.createElement(TextField, { value: connectionType.name, label: \"connectionType\", helperText: connectionType.description ? (React.createElement(React.Fragment, null,\n            connectionType.description,\n            connectionType.url ? (React.createElement(IconButton, { href: connectionType.url, rel: \"noopener noreferrer\", target: \"_blank\" },\n                React.createElement(OpenInNewIcon, null))) : null)) : null, select: true, fullWidth: true, onChange: event => setConnectionType(connectionTypeChoices.find(c => c.name === event.target.value)), variant: \"outlined\" }, connectionTypeChoices.map(c => (React.createElement(MenuItem, { key: c.name, value: c.name }, c.displayName || c.name))))) : null));\n});\nexport default ConnectionTypeSelect;\n","import React, { useMemo, useState } from 'react';\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material';\nimport { getSession, getEnv, isSessionModelWithWidgets, } from '@jbrowse/core/util';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\n// locals\nimport ConfigureConnection from './ConfigureConnection';\nimport ConnectionTypeSelect from './ConnectionTypeSelect';\nimport { isSessionWithConnections } from '@jbrowse/product-core';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nconst steps = ['Select a Connection Type', 'Configure Connection'];\nconst AddConnectionWidget = observer(function ({ model }) {\n    const [connectionType, setConnectionType] = useState();\n    const [connectionId, setConnectionId] = useState();\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    // useMemo is needed for react@18+mobx-react@9, previous code called configScema.create directly in a setConfigModel useState hook setter but this caused infinite loop\n    const configModel = useMemo(() => connectionType === null || connectionType === void 0 ? void 0 : connectionType.configSchema.create({ connectionId }, getEnv(model)), [connectionId, connectionType, model]);\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\" }, steps.map(label => (React.createElement(Step, { key: label },\n            React.createElement(StepLabel, null, label),\n            React.createElement(StepContent, null,\n                activeStep === 0 ? (React.createElement(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getConnectionElements(), connectionType: connectionType, setConnectionType: c => {\n                        setConnectionType(c);\n                        if (!c) {\n                            return;\n                        }\n                        setConnectionId(`${c.name}-${Date.now()}`);\n                    } })) : connectionType && configModel ? (React.createElement(ConfigureConnection, { connectionType: connectionType, model: configModel, session: session })) : null,\n                React.createElement(\"div\", { className: classes.actionsContainer },\n                    React.createElement(Button, { disabled: activeStep === 0, onClick: () => setActiveStep(activeStep - 1), className: classes.button }, \"Back\"),\n                    React.createElement(Button, { disabled: !((activeStep === 0 && connectionType) ||\n                            (activeStep === 1 && configModel)), variant: \"contained\", color: \"primary\", onClick: () => {\n                            if (activeStep === steps.length - 1) {\n                                if (configModel && isSessionWithConnections(session)) {\n                                    const conf = session.addConnectionConf(configModel);\n                                    session.makeConnection(conf);\n                                }\n                                else {\n                                    session.notify('No config model to add');\n                                }\n                                if (isSessionModelWithWidgets(session)) {\n                                    session.hideWidget(model);\n                                }\n                            }\n                            else {\n                                setActiveStep(activeStep + 1);\n                            }\n                        }, className: classes.button, \"data-testid\": \"addConnectionNext\" }, activeStep === steps.length - 1 ? 'Connect' : 'Next')))))))));\n});\nexport default AddConnectionWidget;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');"],"names":["observer","_ref","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","React","Suspense","fallback","LoadingEllipses","target","connectionTypeChoices","setConnectionType","firstChoice","useEffect","autoComplete","TextField","value","name","label","helperText","description","url","IconButton","href","rel","OpenInNewIcon","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","key","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","connectionId","setConnectionId","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","configModel","useMemo","configSchema","create","className","Stepper","orientation","Step","StepLabel","StepContent","ConnectionTypeSelect","getConnectionElements","concat","Date","now","ConfigureConnection","Button","disabled","onClick","color","length","isSessionWithConnections","conf","addConnectionConf","makeConnection","notify","isSessionModelWithWidgets","hideWidget","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","jsx","d"],"sourceRoot":""}