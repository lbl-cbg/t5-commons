"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[8411],{8411:(e,t,n)=>{n.r(t),n.d(t,{default:()=>I});var a=n(65043),r=n(65204),o=n(96233),i=n(80224),l=n.n(i),s=n(49379),c=n(91775);async function m(e,t){const n=(0,c.getSession)(t),{view:a}=t;try{if(!a)throw new Error("No view associated with this view anymore");await a.navToLocString(e)}catch(r){console.error(r),n.notify("".concat(r))}}const d={AM:"The smallest template-independent mapping quality in the template",AS:"Alignment score generated by aligner",BC:"Barcode sequence identifying the sample",BQ:"Offset to base alignment quality (BAQ)",BZ:"Phred quality of the unique molecular barcode bases in the {OX} tag",CB:"Cell identifier",CC:"Reference name of the next hit",CM:"Edit distance between the color sequence and the color reference (see also {NM})",CO:"Free-text comments",CP:"Leftmost coordinate of the next hit",CQ:"Color read base qualities",CR:"Cellular barcode sequence bases (uncorrected)",CS:"Color read sequence",CT:"Complete read annotation tag, used for consensus annotation dummy features",CY:"Phred quality of the cellular barcode sequence in the {CR} tag",E2:"The 2nd most likely base calls",FI:"The index of segment in the template",FS:"Segment suffix",FZ:"Flow signal intensities",GC:"Reserved for backwards compatibility reasons",GQ:"Reserved for backwards compatibility reasons",GS:"Reserved for backwards compatibility reasons",H0:"Number of perfect hits",H1:"Number of 1-difference hits (see also {NM})",H2:"Number of 2-difference hits",HI:"Query hit index",IH:"Query hit total count",LB:"Library",MC:"CIGAR string for mate/next segment",MD:"String encoding mismatched and deleted reference bases",MF:"Reserved for backwards compatibility reasons",MI:"Molecular identifier; a string that uniquely identifies the molecule from which the record was derived",ML:"Base modification probabilities",MM:"Base modifications / methylation ",MQ:"Mapping quality of the mate/next segment",NH:"Number of reported alignments that contain the query in the current record",NM:"Edit distance to the reference",OA:"Original alignment",OC:"Original CIGAR (deprecated; use {OA} instead)",OP:"Original mapping position (deprecated; use {OA} instead)",OQ:"Original base quality",OX:"Original unique molecular barcode bases",PG:"Program",PQ:"Phred likelihood of the template",PT:"Read annotations for parts of the padded read sequence",PU:"Platform unit",Q2:"Phred quality of the mate/next segment sequence in the {R2} tag",QT:"Phred quality of the sample barcode sequence in the {BC} tag",QX:"Quality score of the unique molecular identifier in the {RX} tag",R2:"Sequence of the mate/next segment in the template",RG:"Read group",RT:"Reserved for backwards compatibility reasons",RX:"Sequence bases of the (possibly corrected) unique molecular identifier",S2:"Reserved for backwards compatibility reasons",SA:"Other canonical alignments in a chimeric alignment",SM:"Template-independent mapping quality",SQ:"Reserved for backwards compatibility reasons",TC:"The number of segments in the template",TS:"Transcript strand",U2:"Phred probability of the 2nd call being wrong conditional on the best being wrong",UQ:"Phred likelihood of the segment, conditional on the mapping being correct"};var u=n(94496),f=n(91598),p=n(61959);function g(e){let{tag:t,model:n}=e;return a.createElement("div",null,a.createElement(u.A,null,"List of supplementary alignment locations"),a.createElement("ul",null,t.split(";").filter((e=>!!e)).map(((e,t)=>{const[r,o,i,l]=e.split(","),s=(0,p.PC)(l),c=Math.floor(s/5),d=+o,u=+o+s,g=d-c,h=u+c,y="".concat(r,":").concat(Math.max(1,g),"-").concat(h),b=d.toLocaleString("en-US"),v=u.toLocaleString("en-US"),C="".concat(r,":").concat(b,"-").concat(v," (").concat(i,") [").concat(s,"bp]");return a.createElement("li",{key:"".concat(y,"-").concat(t)},a.createElement(f.A,{onClick:async e=>{e.preventDefault(),m(y,n)}},C))}))))}var h=n(69392),y=n(70276),b=n(95629),v=n(93963);const C=(0,a.lazy)((()=>n.e(8693).then(n.bind(n,8693)))),E=(0,y.makeStyles)()({cursor:{cursor:"pointer"}});function w(e){let{model:t,feature:n,viewType:r}=e;const{classes:o}=E(),i=(0,c.getSession)(t),{view:l}=t,[s,m]=(0,a.useState)(),[d,g]=(0,a.useState)();(0,a.useEffect)((()=>{(async()=>{try{const e=await async function(e){let{view:t,feature:n}=e;const{assemblyManager:a}=(0,c.getSession)(t),r=n.get("CIGAR"),o=n.get("strand"),i=(0,v.bH)(n,"SA")||"",l=n.get("name"),s=(0,p.NI)(r,1),m=await a.waitForAssembly(t.assemblyNames[0]);if(!m)throw new Error("assembly not found");const d=(0,p.Cu)(i,n.id(),o,l,!0),u=n.toJSON();u.clipPos=s,u.strand=1,u.mate={refName:l,start:s,end:s+(0,p.Gl)(r)};const f=[u,...d];return f.forEach(((e,t)=>{e.refName=(null===m||void 0===m?void 0:m.getCanonicalRefName(e.refName))||e.refName,e.syntenyId=t,e.mate.syntenyId=t,e.mate.uniqueId="".concat(e.uniqueId,"_mate")})),f.sort(((e,t)=>e.clipPos-t.clipPos)),f}({view:l,feature:new c.SimpleFeature(n)});m(e)}catch(e){g(e),console.error(e)}})()}),[n,l]);const y=[];if(s)for(let a=0;a<s.length-1;a++)y.push([s[a],s[a+1]]);return a.createElement(a.Fragment,null,y.length?a.createElement("div",null,a.createElement(u.A,null,"Launch split views with breakend source and target"),d?a.createElement(b.ErrorMessage,{error:d}):null,a.createElement("ul",null,y.map(((e,n)=>{const[l,s]=e;return a.createElement("li",{key:"".concat(JSON.stringify(e),"-").concat(n)},a.createElement(h.A,{title:"Top panel->Bottom panel"},a.createElement(f.A,{href:"#",className:o.cursor,onClick:e=>{e.preventDefault(),i.queueDialog((e=>[C,{handleClose:e,f1:l,f2:s,model:t,viewType:r}]))}},l.refName,":",(0,c.toLocale)(1===l.strand?l.end:l.start)," ->"," ",s.refName,":",(0,c.toLocale)(1===s.strand?s.start:s.end))))})))):null)}function S(e){const{model:t,tag:n,feature:r}=e,o=(0,c.getSession)(t),{pluginManager:i}=(0,c.getEnv)(o);let l;try{l=i.getViewType("BreakpointSplitView")}catch(m){}return a.createElement(s.BaseCard,{...e,title:"Supplementary alignments"},a.createElement(g,{model:t,tag:n}),l?a.createElement(w,{viewType:l,model:t,feature:r}):null)}var q=n(62528),k=n(99784),A=n(1273),R=n(72966),N=n.n(R);const M=(0,y.makeStyles)()({compact:{paddingRight:0,paddingTop:0,paddingBottom:0}}),P=["read paired","read mapped in proper pair","read unmapped","mate unmapped","read reverse strand","mate reverse strand","first in pair","second in pair","not primary alignment","read fails platform/vendor quality checks","read is PCR or optical duplicate","supplementary alignment"];function T(e){const{classes:t}=M(),{feature:n}=e,{flags:r}=n;return a.createElement(s.BaseCard,{...e,title:"Flags"},a.createElement(N(),{name:"Flag",value:r}),a.createElement(q.A,null,P.map(((e,n)=>{const o=r&1<<n,i="".concat(e,"_").concat(o);return a.createElement(k.A,{key:i,control:a.createElement(A.A,{className:t.compact,checked:Boolean(o),name:e,readOnly:!0}),label:e})}))))}function O(e){let{locString:t,model:n}=e;return a.createElement(f.A,{onClick:e=>{e.preventDefault(),m(t,n)},href:"#"},t)}var B=n(75270),Q=n.n(B);function F(e){let{value:t}=e;const[n,r]=(0,a.useState)(!1),[o,i]=(0,a.useState)(!1),l=String(t);return l.length>100?a.createElement(a.Fragment,null,a.createElement("button",{type:"button",onClick:()=>{Q()(l),i(!0),setTimeout((()=>i(!1)),700)}},o?"Copied to clipboard":"Copy"),a.createElement("button",{type:"button",onClick:()=>r((e=>!e))},n?"Show less":"Show more"),a.createElement("div",null,n?l:"".concat(l.slice(0,100),"..."))):a.createElement("div",null,l)}const x=["clipPos","flags"],I=(0,o.observer)((function(e){const{model:t}=e,n=l()(t.featureData),o=function(e,t){var n;return(null===(n=t.tags)||void 0===n?void 0:n[e])||t[e]}("SA",n);return a.createElement(r.A,{"data-testid":"alignment-side-drawer"},a.createElement(s.FeatureDetails,{...e,omit:x,descriptions:{...d,tags:d},feature:n,formatter:(e,n)=>"next_segment_position"===n?a.createElement(O,{model:t,locString:e}):a.createElement(F,{value:e})}),o?a.createElement(S,{model:t,tag:o,feature:n}):null,void 0!==n.flags?a.createElement(T,{feature:n,...e}):null)}))}}]);
//# sourceMappingURL=8411.a762fa12.chunk.js.map