{"version":3,"file":"static/js/7479.6d087c77.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-alignments/esm/LinearReadCloudDisplay/util.js","../node_modules/@jbrowse/plugin-alignments/esm/LinearReadCloudDisplay/drawPairChains.js","../node_modules/@jbrowse/plugin-alignments/esm/LinearReadCloudDisplay/drawFeats.js","../node_modules/@jbrowse/plugin-alignments/esm/LinearReadCloudDisplay/drawLongReadChains.js","../node_modules/@jbrowse/plugin-alignments/esm/shared/util.js"],"sourcesContent":["// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(x, y, width, height, ctx, fillColor) {\n    if (width < 0) {\n        x += width;\n        width = -width;\n    }\n    if (height < 0) {\n        y += height;\n        height = -height;\n    }\n    if (fillColor) {\n        ctx.fillStyle = fillColor;\n    }\n    ctx.fillRect(x, y, width, height);\n}\nexport function strokeRectCtx(x, y, width, height, ctx, strokeColor) {\n    if (width < 0) {\n        x += width;\n        width = -width;\n    }\n    if (height < 0) {\n        y += height;\n        height = -height;\n    }\n    if (strokeColor) {\n        ctx.strokeStyle = strokeColor;\n    }\n    ctx.strokeRect(x, y, width, height);\n}\n","import { getConf } from '@jbrowse/core/configuration';\nimport { max, min } from '@jbrowse/core/util';\nimport { fillRectCtx, strokeRectCtx } from './util';\nimport { getPairedInsertSizeAndOrientationColor, getPairedInsertSizeColor, getPairedOrientationColor, } from '../shared/color';\nexport function drawPairChains({ ctx, self, chainData, view, asm, }) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const coords = [];\n    const featureHeight = getConf(self, 'featureHeight');\n    const type = ((_a = self.colorBy) === null || _a === void 0 ? void 0 : _a.type) || 'insertSizeAndOrientation';\n    const { chains, stats } = chainData;\n    for (const chain of chains) {\n        // if we're looking at a paired read (flag 1) then assume it is just\n        // two reads (some small cases may defy this assumption such as\n        // secondary alignments but this may be uncommon)\n        if (chain.length > 1) {\n            const v0 = chain[0];\n            const v1 = chain[1];\n            const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName;\n            const ra2 = asm.getCanonicalRefName(v1.refName) || v1.refName;\n            const r1s = (_b = view.bpToPx({ refName: ra1, coord: v0.start })) === null || _b === void 0 ? void 0 : _b.offsetPx;\n            const r1e = (_c = view.bpToPx({ refName: ra1, coord: v0.end })) === null || _c === void 0 ? void 0 : _c.offsetPx;\n            const r2s = (_d = view.bpToPx({ refName: ra2, coord: v1.start })) === null || _d === void 0 ? void 0 : _d.offsetPx;\n            const r2e = (_e = view.bpToPx({ refName: ra2, coord: v1.end })) === null || _e === void 0 ? void 0 : _e.offsetPx;\n            let distance = 0;\n            if (r1s !== undefined &&\n                r1e !== undefined &&\n                r2s !== undefined &&\n                r2e !== undefined) {\n                if (v0.refName === v1.refName) {\n                    const s = Math.min(v0.start, v1.start);\n                    const e = Math.max(v0.end, v1.end);\n                    distance = Math.abs(e - s);\n                }\n                coords.push({\n                    r1s,\n                    r1e,\n                    r2s,\n                    r2e,\n                    v0,\n                    v1,\n                    distance,\n                });\n            }\n        }\n        else if (self.drawSingletons) {\n            const v0 = chain[0];\n            const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName;\n            const r1s = (_f = view.bpToPx({ refName: ra1, coord: v0.start })) === null || _f === void 0 ? void 0 : _f.offsetPx;\n            const r1e = (_g = view.bpToPx({ refName: ra1, coord: v0.end })) === null || _g === void 0 ? void 0 : _g.offsetPx;\n            if (r1s !== undefined && r1e !== undefined) {\n                const w1 = Math.max(r1e - r1s, 2);\n                fillRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#f00');\n                strokeRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#a00');\n            }\n        }\n    }\n    const maxD = Math.log(max(coords.map(c => c.distance)));\n    const minD = Math.max(Math.log(min(coords.map(c => c.distance))) - 1, 0);\n    const scaler = (self.height - 20) / (maxD - minD);\n    for (const { r1e, r1s, r2e, r2s, distance, v0, v1 } of coords) {\n        const w1 = Math.max(r1e - r1s, 2);\n        const w2 = Math.max(r2e - r2s, 2);\n        const [fill, stroke] = getPairedColor({ type, v0, v1, stats }) || [];\n        const top = (Math.log(distance) - minD) * scaler;\n        const halfHeight = featureHeight / 2 - 0.5;\n        const w = r2s - r1e;\n        fillRectCtx(r1e - view.offsetPx, top + halfHeight, w, 1, ctx, 'black');\n        strokeRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, stroke);\n        strokeRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, stroke);\n        fillRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, fill);\n        fillRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, fill);\n    }\n}\nexport function getPairedColor({ type, v0, v1, stats, }) {\n    if (type === 'insertSizeAndOrientation') {\n        return getPairedInsertSizeAndOrientationColor(v0, v1, stats);\n    }\n    else if (type === 'orientation') {\n        return getPairedOrientationColor(v0);\n    }\n    else if (type === 'insertSize') {\n        return getPairedInsertSizeColor(v0, v1, stats);\n    }\n    else if (type === 'gradient') {\n        const s = Math.min(v0.start, v1.start);\n        const e = Math.max(v0.end, v1.end);\n        return [\n            `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,50%)`,\n            `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,30%)`,\n        ];\n    }\n    return undefined;\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util';\nimport { hasPairedReads } from '../shared/util';\nimport { drawPairChains } from './drawPairChains';\nimport { drawLongReadChains } from './drawLongReadChains';\nexport function drawFeats(self, ctx) {\n    const { chainData } = self;\n    if (!chainData) {\n        return;\n    }\n    const { assemblyManager } = getSession(self);\n    const view = getContainingView(self);\n    const assemblyName = view.assemblyNames[0];\n    const asm = assemblyManager.get(assemblyName);\n    if (!asm) {\n        return;\n    }\n    const hasPaired = hasPairedReads(chainData);\n    if (hasPaired) {\n        drawPairChains({ self, view, asm, ctx, chainData });\n    }\n    else {\n        drawLongReadChains({ self, view, asm, ctx, chainData });\n    }\n}\n","import { getConf } from '@jbrowse/core/configuration';\nimport { max, min } from '@jbrowse/core/util';\nimport { fillColor, strokeColor } from '../shared/color';\nimport { fillRectCtx, strokeRectCtx } from './util';\nexport function drawLongReadChains({ ctx, self, chainData, view, asm, }) {\n    var _a, _b, _c, _d, _e;\n    const distances = [];\n    const minXs = [];\n    const { chains } = chainData;\n    const { height } = self;\n    const featureHeight = getConf(self, 'featureHeight');\n    // get bounds on the 'distances' (pixel span that a particular split long\n    // read 'chain' would have in view)\n    for (const chain of chains) {\n        let minX = Number.MAX_VALUE;\n        let maxX = Number.MIN_VALUE;\n        for (const elt of chain) {\n            const refName = asm.getCanonicalRefName(elt.refName) || elt.refName;\n            const rs = (_a = view.bpToPx({ refName, coord: elt.start })) === null || _a === void 0 ? void 0 : _a.offsetPx;\n            const re = (_b = view.bpToPx({ refName, coord: elt.end })) === null || _b === void 0 ? void 0 : _b.offsetPx;\n            if (rs !== undefined && re !== undefined) {\n                minX = Math.min(minX, rs);\n                maxX = Math.max(maxX, re);\n            }\n        }\n        const distance = Math.abs(maxX - minX);\n        distances.push(distance);\n        minXs.push(minX);\n    }\n    const maxD = Math.log(max(distances));\n    const minD = Math.max(Math.log(min(distances)) - 1, 0);\n    const scaler = (height - 20) / (maxD - minD);\n    const halfHeight = featureHeight / 2 - 0.5;\n    // draw split long read 'chains' as connected entities\n    for (let i = 0; i < chains.length; i++) {\n        const chain = chains[i];\n        const w = distances[i];\n        const top = (Math.log(w) - minD) * scaler;\n        const min = minXs[i];\n        fillRectCtx(min - view.offsetPx, top + halfHeight, w, 1, ctx, 'black');\n        const c1 = chain[0];\n        let primaryStrand;\n        if (!(c1.flags & 2048)) {\n            primaryStrand = c1.strand;\n        }\n        else {\n            const res = (_c = c1.SA) === null || _c === void 0 ? void 0 : _c.split(';')[0].split(',')[2];\n            primaryStrand = res === '-' ? -1 : 1;\n        }\n        for (const v0 of chain) {\n            const ra = asm.getCanonicalRefName(v0.refName) || v0.refName;\n            const rs = (_d = view.bpToPx({ refName: ra, coord: v0.start })) === null || _d === void 0 ? void 0 : _d.offsetPx;\n            const re = (_e = view.bpToPx({ refName: ra, coord: v0.end })) === null || _e === void 0 ? void 0 : _e.offsetPx;\n            if (rs !== undefined && re !== undefined) {\n                const w = Math.max(re - rs, 2);\n                const l = rs - view.offsetPx;\n                const effectiveStrand = v0.strand * primaryStrand;\n                const c = effectiveStrand === -1 ? 'color_rev_strand' : 'color_fwd_strand';\n                strokeRectCtx(l, top, w, featureHeight, ctx, strokeColor[c]);\n                fillRectCtx(l, top, w, featureHeight, ctx, fillColor[c]);\n            }\n        }\n    }\n}\n","export function hasPairedReads(features) {\n    for (const f of features.chains.values()) {\n        if (f[0].flags & 1) {\n            return true;\n        }\n    }\n    return false;\n}\n"],"names":["fillRectCtx","x","y","width","height","ctx","fillColor","fillStyle","fillRect","strokeRectCtx","strokeColor","strokeStyle","strokeRect","getPairedColor","_ref2","type","v0","v1","stats","getPairedInsertSizeAndOrientationColor","getPairedOrientationColor","getPairedInsertSizeColor","s","Math","min","start","e","max","end","concat","log10","abs","drawFeats","self","chainData","assemblyManager","getSession","view","getContainingView","assemblyName","assemblyNames","asm","get","hasPairedReads","_ref","_a","_b","_c","_d","_e","_f","_g","coords","featureHeight","getConf","colorBy","chains","chain","length","ra1","getCanonicalRefName","refName","ra2","r1s","bpToPx","coord","offsetPx","r1e","r2s","r2e","distance","undefined","push","drawSingletons","w1","maxD","log","map","c","minD","scaler","w2","fill","stroke","top","halfHeight","w","drawPairChains","distances","minXs","minX","Number","MAX_VALUE","maxX","MIN_VALUE","elt","rs","re","i","c1","primaryStrand","flags","SA","split","strand","ra","l","drawLongReadChains","features","f","values"],"sourceRoot":""}