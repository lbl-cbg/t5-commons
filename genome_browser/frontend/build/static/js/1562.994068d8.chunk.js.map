{"version":3,"file":"static/js/1562.994068d8.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/util.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/colorBy.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/getAlignmentShapeColor.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignment.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignmentShape.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseQuality.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseLettering.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderModifications.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMethylation.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMismatches.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderSoftClipping.js","../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/makeImageData.js"],"sourcesContent":["import { measureText } from '@jbrowse/core/util';\nexport function fillRect(ctx, l, t, w, h, cw, color) {\n    if (l + w < 0 || l > cw) {\n        return;\n    }\n    else {\n        if (color) {\n            ctx.fillStyle = color;\n        }\n        ctx.fillRect(l, t, w, h);\n    }\n}\nexport function getColorBaseMap(theme) {\n    const { bases } = theme.palette;\n    return {\n        A: bases.A.main,\n        C: bases.C.main,\n        G: bases.G.main,\n        T: bases.T.main,\n        deletion: '#808080', // gray\n    };\n}\nexport function getContrastBaseMap(theme) {\n    return Object.fromEntries(Object.entries(getColorBaseMap(theme)).map(([key, value]) => [\n        key,\n        theme.palette.getContrastText(value),\n    ]));\n}\nexport function shouldDrawSNPsMuted(type) {\n    return ['methylation', 'modifications'].includes(type || '');\n}\nexport function shouldDrawIndels() {\n    return true;\n}\n// get width and height of chars the height is an approximation: width letter M\n// is approximately the height\nexport function getCharWidthHeight() {\n    const charWidth = measureText('A');\n    const charHeight = measureText('M') - 2;\n    return { charWidth, charHeight };\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { fillColor } from '../shared/color';\nimport { orientationTypes } from '../util';\nexport function colorByInsertSize(feature) {\n    return feature.get('is_paired') &&\n        feature.get('refName') !== feature.get('next_ref')\n        ? '#555'\n        : `hsl(${Math.abs(feature.get('template_length')) / 10},50%,50%)`;\n}\nexport function colorByMappingQuality(feature) {\n    return `hsl(${feature.get('score')},50%,50%)`;\n}\nfunction getOrientation(feature, config) {\n    const orientationType = readConfObject(config, 'orientationType');\n    const type = orientationTypes[orientationType];\n    const orientation = type[feature.get('pair_orientation')];\n    return {\n        LR: 'color_pair_lr',\n        RR: 'color_pair_rr',\n        RL: 'color_pair_rl',\n        LL: 'color_pair_ll',\n    }[orientation];\n}\nexport function colorByStrand(feature) {\n    return feature.get('strand') === -1 ? '#8F8FD8' : '#EC8B8B';\n}\nexport function colorByOrientation(feature, config) {\n    return fillColor[getOrientation(feature, config) || 'color_nostrand'];\n}\nfunction getStranded(feature) {\n    const flags = feature.get('flags');\n    const strand = feature.get('strand');\n    // is paired\n    if (flags & 1) {\n        // first-of-pair?\n        const flipper = flags & 64 ? -1 : 1;\n        // proper pairing\n        if (flags & 2) {\n            return strand * flipper === 1 ? 'color_rev_strand' : 'color_fwd_strand';\n        }\n        // mate missing, separate color\n        else if (flags & 8) {\n            return strand * flipper === 1\n                ? 'color_rev_missing_mate'\n                : 'color_fwd_missing_mate';\n        }\n        // same chrom without proper pairing gets separate color\n        else if (feature.get('refName') === feature.get('next_ref')) {\n            return strand * flipper === 1\n                ? 'color_rev_strand_not_proper'\n                : 'color_fwd_strand_not_proper';\n        }\n        // abberant chrom\n        else {\n            return strand === 1 ? 'color_fwd_diff_chr' : 'color_rev_diff_chr';\n        }\n    }\n    return 'color_unknown';\n}\nexport function colorByStrandedRnaSeq(feature) {\n    return fillColor[getStranded(feature)];\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { fillColor } from '../shared/color';\nimport { colorByInsertSize, colorByMappingQuality, colorByOrientation, colorByStrand, colorByStrandedRnaSeq, } from './colorBy';\nexport function getAlignmentShapeColor({ colorType, tag, feature, config, defaultColor, colorTagMap, }) {\n    // first pass for simple color changes that change the color of the\n    // alignment\n    switch (colorType) {\n        case 'insertSize':\n            return colorByInsertSize(feature);\n        case 'strand':\n            return colorByStrand(feature);\n        case 'mappingQuality':\n            return colorByMappingQuality(feature);\n        case 'pairOrientation':\n            return colorByOrientation(feature, config);\n        case 'stranded':\n            return colorByStrandedRnaSeq(feature);\n        case 'xs':\n        case 'tag': {\n            const tags = feature.get('tags');\n            const val = tags ? tags[tag] : feature.get(tag);\n            if (tag === 'XS' || tag === 'TS') {\n                return fillColor[{\n                    '-': 'color_rev_strand',\n                    '+': 'color_fwd_strand',\n                }[val] || 'color_nostrand'];\n            }\n            else if (tag === 'ts') {\n                return fillColor[{\n                    '-': feature.get('strand') === -1\n                        ? 'color_fwd_strand'\n                        : 'color_rev_strand',\n                    '+': feature.get('strand') === -1\n                        ? 'color_rev_strand'\n                        : 'color_fwd_strand',\n                }[val] || 'color_nostrand'];\n            }\n            else {\n                return colorTagMap[val] || fillColor.color_nostrand;\n            }\n        }\n        case 'insertSizeAndPairOrientation':\n            break;\n        case 'modifications':\n        case 'methylation':\n            // this coloring is similar to igv.js, and is helpful to color negative\n            // strand reads differently because their c-g will be flipped (e.g. g-c\n            // read right to left)\n            return feature.get('flags') & 16 ? '#c8dcc8' : '#c8c8c8';\n        default:\n            return defaultColor\n                ? 'lightgrey'\n                : readConfObject(config, 'color', { feature });\n    }\n}\n","import { getAlignmentShapeColor } from './getAlignmentShapeColor';\nimport { renderAlignmentShape } from './renderAlignmentShape';\nimport { renderPerBaseQuality } from './renderPerBaseQuality';\nimport { renderPerBaseLettering } from './renderPerBaseLettering';\nimport { renderModifications } from './renderModifications';\nimport { renderMethylation } from './renderMethylation';\nexport function renderAlignment({ ctx, feat, renderArgs, colorForBase, contrastForBase, charWidth, charHeight, defaultColor, canvasWidth, }) {\n    const { config, bpPerPx, regions, colorBy, colorTagMap = {} } = renderArgs;\n    const { tag = '', type: colorType = '' } = colorBy || {};\n    const { feature } = feat;\n    const region = regions[0];\n    ctx.fillStyle = getAlignmentShapeColor({\n        feature,\n        config,\n        tag,\n        defaultColor,\n        colorType,\n        colorTagMap,\n    });\n    renderAlignmentShape({ ctx, feat, renderArgs });\n    // second pass for color types that render per-base things that go over the\n    // existing drawing\n    switch (colorType) {\n        case 'perBaseQuality':\n            renderPerBaseQuality({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                canvasWidth,\n            });\n            break;\n        case 'perBaseLettering':\n            renderPerBaseLettering({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                colorForBase,\n                contrastForBase,\n                charWidth,\n                charHeight,\n                canvasWidth,\n            });\n            break;\n        case 'modifications':\n            renderModifications({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n            });\n            break;\n        case 'methylation':\n            renderMethylation({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n            });\n            break;\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nexport function renderAlignmentShape({ ctx, feat, renderArgs, }) {\n    const { regions, bpPerPx } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const [region] = regions;\n    const s = feature.get('start');\n    const e = feature.get('end');\n    const [leftPx, rightPx] = bpSpanPx(s, e, region, bpPerPx);\n    const flip = region.reversed ? -1 : 1;\n    const strand = feature.get('strand') * flip;\n    if (bpPerPx < 10 && heightPx > 5) {\n        if (strand === -1) {\n            ctx.beginPath();\n            ctx.moveTo(leftPx - 5, topPx + heightPx / 2);\n            ctx.lineTo(leftPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx);\n            ctx.lineTo(leftPx, topPx);\n            ctx.closePath();\n            ctx.fill();\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(leftPx, topPx);\n            ctx.lineTo(leftPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx + heightPx);\n            ctx.lineTo(rightPx + 5, topPx + heightPx / 2);\n            ctx.lineTo(rightPx, topPx);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    else {\n        ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx);\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { parseCigar } from '../MismatchParser';\nimport { fillRect } from './util';\nexport function renderPerBaseQuality({ ctx, feat, region, bpPerPx, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const qual = feature.get('qual') || '';\n    const scores = qual.split(' ').map(val => +val);\n    const cigarOps = parseCigar(feature.get('CIGAR'));\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0; // sequence offset\n    let roffset = 0; // reference offset\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const score = scores[soffset + m];\n                const start0 = start + roffset + m;\n                const leftPx = bpSpanPx(start0, start0 + 1, region, bpPerPx)[0];\n                const c = `hsl(${score === 255 ? 150 : score * 1.5},55%,50%)`;\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { parseCigar } from '../MismatchParser';\nimport { fillRect } from './util';\nexport function renderPerBaseLettering({ ctx, feat, region, bpPerPx, colorForBase, contrastForBase, charWidth, charHeight, canvasWidth, }) {\n    const heightLim = charHeight - 2;\n    const { feature, topPx, heightPx } = feat;\n    const seq = feature.get('seq');\n    const cigarOps = parseCigar(feature.get('CIGAR'));\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0;\n    let roffset = 0;\n    if (!seq) {\n        return;\n    }\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const letter = seq[soffset + m];\n                const r = start + roffset + m;\n                const [leftPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n                const c = colorForBase[letter];\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n                if (w >= charWidth && heightPx >= heightLim) {\n                    // normal SNP coloring\n                    ctx.fillStyle = contrastForBase[letter];\n                    ctx.fillText(letter, leftPx + (w - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { getModificationPositions, getModificationProbabilities, getNextRefPos, parseCigar, } from '../MismatchParser';\nimport { getTagAlt } from '../util';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\n// render modifications stored in MM tag in BAM\n//\n// ML stores probabilities as array of numerics and MP is scaled phred scores\n// https://github.com/samtools/hts-specs/pull/418/files#diff-e765c6479316309f56b636f88189cdde8c40b854c7bdcce9ee7fe87a4e76febcR596\n//\n// if we have ML or Ml, it is an 8bit probability, divide by 255\n//\n// if we have MP or Mp it is phred scaled ASCII, which can go up to 90 but\n// has very high likelihood basecalls at that point, we really only care\n// about low qual calls <20 approx\nexport function renderModifications({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const { modificationTagMap = {} } = renderArgs;\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const mm = getTagAlt(feature, 'MM', 'Mm') || '';\n    const cigar = feature.get('CIGAR');\n    const start = feature.get('start');\n    const strand = feature.get('strand');\n    const cigarOps = parseCigar(cigar);\n    const probabilities = getModificationProbabilities(feature);\n    const modifications = getModificationPositions(mm, seq, strand);\n    // probIndex applies across multiple modifications e.g.\n    let probIndex = 0;\n    for (const { type, positions } of modifications) {\n        const col = modificationTagMap[type] || 'black';\n        const base = colord(col);\n        for (const readPos of getNextRefPos(cigarOps, positions)) {\n            const r = start + readPos;\n            const [leftPx, rightPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n            const prob = (probabilities === null || probabilities === void 0 ? void 0 : probabilities[probIndex]) || 0;\n            const c = prob !== 1 ? base.alpha(prob + 0.1).toHslString() : col;\n            const w = rightPx - leftPx + 0.5;\n            fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n            probIndex++;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { getMethBins } from '../MismatchParser';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\n// Color by methylation is slightly modified version of color by\n// modifications that focuses on CpG sites, with non-methylated CpG colored\nexport function renderMethylation({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }) {\n    var _a, _b;\n    const { regionSequence } = renderArgs;\n    const { feature, topPx, heightPx } = feat;\n    if (!regionSequence) {\n        throw new Error('region sequence required for methylation');\n    }\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const fstart = feature.get('start');\n    const fend = feature.get('end');\n    const { methBins, methProbs } = getMethBins(feature);\n    function getCol(k) {\n        if (methBins[k]) {\n            const p = methProbs[k] || 0;\n            return (p > 0.5\n                ? colord('red').alpha((p - 0.5) * 2)\n                : colord('blue').alpha(1 - p * 2)).toHslString();\n        }\n        return undefined;\n    }\n    for (let i = 0; i < fend - fstart; i++) {\n        const j = i + fstart;\n        const l1 = (_a = regionSequence[j - region.start + 1]) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        const l2 = (_b = regionSequence[j - region.start + 2]) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        if (l1 === 'c' && l2 === 'g') {\n            if (bpPerPx > 2) {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 2, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n            }\n            else {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 1, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n                const [leftPx2, rightPx2] = bpSpanPx(j + 1, j + 2, region, bpPerPx);\n                const w2 = rightPx2 - leftPx2 + 0.5;\n                const c2 = getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx2, topPx, w2, heightPx, canvasWidth, c2);\n            }\n        }\n    }\n}\n","import { bpSpanPx, measureText } from '@jbrowse/core/util';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\nexport function renderMismatches({ ctx, feat, renderArgs, minSubfeatureWidth, largeInsertionIndicatorScale, mismatchAlpha, charWidth, charHeight, colorForBase, contrastForBase, canvasWidth, drawSNPsMuted, drawIndels = true, }) {\n    const { bpPerPx, regions } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const [region] = regions;\n    const start = feature.get('start');\n    const pxPerBp = Math.min(1 / bpPerPx, 2);\n    const mismatches = feature.get('mismatches');\n    const heightLim = charHeight - 2;\n    // extraHorizontallyFlippedOffset is used to draw interbase items, which\n    // are located to the left when forward and right when reversed\n    const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx + 1 : -1;\n    if (!mismatches) {\n        return;\n    }\n    // two pass rendering: first pass, draw all the mismatches except wide\n    // insertion markers\n    for (const mismatch of mismatches) {\n        const mstart = start + mismatch.start;\n        const mlen = mismatch.length;\n        const mbase = mismatch.base;\n        const [leftPx, rightPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n        const widthPx = Math.max(minSubfeatureWidth, Math.abs(leftPx - rightPx));\n        if (mismatch.type === 'mismatch') {\n            if (!drawSNPsMuted) {\n                const baseColor = colorForBase[mismatch.base] || '#888';\n                const c = mismatchAlpha\n                    ? mismatch.qual === undefined\n                        ? baseColor\n                        : colord(baseColor)\n                            .alpha(Math.min(1, mismatch.qual / 50))\n                            .toHslString()\n                    : baseColor;\n                fillRect(ctx, Math.round(leftPx), topPx, widthPx, heightPx, canvasWidth, c);\n            }\n            if (widthPx >= charWidth && heightPx >= heightLim) {\n                // normal SNP coloring\n                const contrastColor = drawSNPsMuted\n                    ? 'black'\n                    : contrastForBase[mismatch.base] || 'black';\n                ctx.fillStyle = mismatchAlpha\n                    ? mismatch.qual === undefined\n                        ? contrastColor\n                        : colord(contrastColor)\n                            .alpha(Math.min(1, mismatch.qual / 50))\n                            .toHslString()\n                    : contrastColor;\n                ctx.fillText(mbase, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'deletion' && drawIndels) {\n            fillRect(ctx, leftPx, topPx, Math.abs(leftPx - rightPx), heightPx, canvasWidth, colorForBase.deletion);\n            const txt = `${mismatch.length}`;\n            const rwidth = measureText(txt, 10);\n            if (widthPx >= rwidth && heightPx >= heightLim) {\n                ctx.fillStyle = contrastForBase.deletion;\n                ctx.fillText(txt, (leftPx + rightPx) / 2 - rwidth / 2, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'insertion' && drawIndels) {\n            ctx.fillStyle = 'purple';\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const len = +mismatch.base || mismatch.length;\n            const insW = Math.max(0, Math.min(1.2, 1 / bpPerPx));\n            if (len < 10) {\n                fillRect(ctx, pos, topPx, insW, heightPx, canvasWidth, 'purple');\n                if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                    const l = pos - insW;\n                    fillRect(ctx, l, topPx, insW * 3, 1, canvasWidth);\n                    fillRect(ctx, l, topPx + heightPx - 1, insW * 3, 1, canvasWidth);\n                    ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n                }\n            }\n        }\n        else if (mismatch.type === 'hardclip' || mismatch.type === 'softclip') {\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const c = mismatch.type === 'hardclip' ? 'red' : 'blue';\n            const clipW = Math.max(minSubfeatureWidth, pxPerBp);\n            fillRect(ctx, pos, topPx, clipW, heightPx, canvasWidth, c);\n            if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                const l = pos - clipW;\n                fillRect(ctx, l, topPx, clipW * 3, 1, canvasWidth);\n                fillRect(ctx, l, topPx + heightPx - 1, clipW * 3, 1, canvasWidth);\n                ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'skip') {\n            // fix to avoid bad rendering note that this was also related to chrome\n            // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1131528\n            // also affected firefox ref #1236 #2750\n            if (leftPx + widthPx > 0) {\n                // make small exons more visible when zoomed far out\n                const adjustPx = widthPx - (bpPerPx > 10 ? 1.5 : 0);\n                ctx.clearRect(leftPx, topPx, adjustPx, heightPx);\n                fillRect(ctx, Math.max(0, leftPx), topPx + heightPx / 2 - 1, adjustPx + (leftPx < 0 ? leftPx : 0), 2, canvasWidth, '#333');\n            }\n        }\n    }\n    // second pass, draw wide insertion markers on top\n    if (drawIndels) {\n        for (const mismatch of mismatches) {\n            const mstart = start + mismatch.start;\n            const mlen = mismatch.length;\n            const [leftPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n            const len = +mismatch.base || mismatch.length;\n            const txt = `${len}`;\n            if (mismatch.type === 'insertion' && len >= 10) {\n                if (bpPerPx > largeInsertionIndicatorScale) {\n                    fillRect(ctx, leftPx - 1, topPx, 2, heightPx, canvasWidth, 'purple');\n                }\n                else if (heightPx > charHeight) {\n                    const rwidth = measureText(txt);\n                    const padding = 5;\n                    fillRect(ctx, leftPx - rwidth / 2 - padding, topPx, rwidth + 2 * padding, heightPx, canvasWidth, 'purple');\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(txt, leftPx - rwidth / 2, topPx + heightPx);\n                }\n                else {\n                    const padding = 2;\n                    fillRect(ctx, leftPx - padding, topPx, 2 * padding, heightPx, canvasWidth, 'purple');\n                }\n            }\n        }\n    }\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { bpSpanPx } from '@jbrowse/core/util';\nimport { fillRect, getCharWidthHeight } from './util';\nexport function renderSoftClipping({ ctx, feat, renderArgs, config, theme, colorForBase, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const { regions, bpPerPx } = renderArgs;\n    const [region] = regions;\n    const minFeatWidth = readConfObject(config, 'minSubfeatureWidth');\n    const mismatches = feature.get('mismatches');\n    const seq = feature.get('seq');\n    const { charWidth, charHeight } = getCharWidthHeight();\n    // Display all bases softclipped off in lightened colors\n    if (!(seq && mismatches)) {\n        return;\n    }\n    const heightLim = charHeight - 2;\n    for (const mismatch of mismatches) {\n        if (mismatch.type === 'softclip') {\n            const len = mismatch.cliplen || 0;\n            const s = feature.get('start');\n            const start = mismatch.start === 0 ? s - len : s + mismatch.start;\n            for (let k = 0; k < len; k += 1) {\n                const base = seq.charAt(k + mismatch.start);\n                // If softclip length+start is longer than sequence, no need to\n                // continue showing base\n                if (!base) {\n                    return;\n                }\n                const s0 = start + k;\n                const [leftPx, rightPx] = bpSpanPx(s0, s0 + 1, region, bpPerPx);\n                const widthPx = Math.max(minFeatWidth, rightPx - leftPx);\n                // Black accounts for IUPAC ambiguity code bases such as N that\n                // show in soft clipping\n                const baseColor = colorForBase[base] || '#000000';\n                ctx.fillStyle = baseColor;\n                fillRect(ctx, leftPx, topPx, widthPx, heightPx, canvasWidth);\n                if (widthPx >= charWidth && heightPx >= heightLim) {\n                    ctx.fillStyle = theme.palette.getContrastText(baseColor);\n                    ctx.fillText(base, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n        }\n    }\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { createJBrowseTheme } from '@jbrowse/core/ui';\nimport { getCharWidthHeight, getColorBaseMap, getContrastBaseMap, shouldDrawIndels, shouldDrawSNPsMuted, } from './util';\nimport { renderAlignment } from './renderAlignment';\nimport { renderMismatches } from './renderMismatches';\nimport { renderSoftClipping } from './renderSoftClipping';\nexport function makeImageData({ ctx, layoutRecords, canvasWidth, renderArgs, }) {\n    const { config, showSoftClip, colorBy, theme: configTheme } = renderArgs;\n    const mismatchAlpha = readConfObject(config, 'mismatchAlpha');\n    const minSubfeatureWidth = readConfObject(config, 'minSubfeatureWidth');\n    const largeInsertionIndicatorScale = readConfObject(config, 'largeInsertionIndicatorScale');\n    const defaultColor = readConfObject(config, 'color') === '#f0f';\n    const theme = createJBrowseTheme(configTheme);\n    const colorForBase = getColorBaseMap(theme);\n    const contrastForBase = getContrastBaseMap(theme);\n    ctx.font = 'bold 10px Courier New,monospace';\n    const { charWidth, charHeight } = getCharWidthHeight();\n    const drawSNPsMuted = shouldDrawSNPsMuted(colorBy === null || colorBy === void 0 ? void 0 : colorBy.type);\n    const drawIndels = shouldDrawIndels();\n    for (const feat of layoutRecords) {\n        renderAlignment({\n            ctx,\n            feat,\n            renderArgs,\n            defaultColor,\n            colorForBase,\n            contrastForBase,\n            charWidth,\n            charHeight,\n            canvasWidth,\n        });\n        renderMismatches({\n            ctx,\n            feat,\n            renderArgs,\n            mismatchAlpha,\n            drawSNPsMuted,\n            drawIndels,\n            largeInsertionIndicatorScale,\n            minSubfeatureWidth,\n            charWidth,\n            charHeight,\n            colorForBase,\n            contrastForBase,\n            canvasWidth,\n        });\n        if (showSoftClip) {\n            renderSoftClipping({\n                ctx,\n                feat,\n                renderArgs,\n                colorForBase,\n                config,\n                theme,\n                canvasWidth,\n            });\n        }\n    }\n}\n"],"names":["fillRect","ctx","l","t","w","h","cw","color","fillStyle","getColorBaseMap","theme","bases","palette","A","main","C","G","T","deletion","getCharWidthHeight","charWidth","measureText","charHeight","colorByOrientation","feature","config","fillColor","orientationType","readConfObject","LR","RR","RL","LL","orientationTypes","get","getOrientation","getAlignmentShapeColor","_ref","colorType","tag","defaultColor","colorTagMap","concat","Math","abs","colorByInsertSize","colorByStrand","colorByMappingQuality","flags","strand","flipper","getStranded","colorByStrandedRnaSeq","tags","val","color_nostrand","renderAlignment","feat","renderArgs","colorForBase","contrastForBase","canvasWidth","bpPerPx","regions","colorBy","type","region","heightPx","topPx","s","e","leftPx","rightPx","bpSpanPx","flip","reversed","beginPath","moveTo","lineTo","closePath","fill","renderAlignmentShape","scores","split","map","cigarOps","parseCigar","start","soffset","roffset","i","length","len","op","m","score","start0","renderPerBaseQuality","heightLim","seq","letter","r","fillText","renderPerBaseLettering","modificationTagMap","mm","getTagAlt","cigar","probabilities","getModificationProbabilities","modifications","getModificationPositions","probIndex","positions","col","base","colord","readPos","getNextRefPos","prob","alpha","toHslString","renderModifications","_a","_b","regionSequence","Error","fstart","fend","methBins","methProbs","getMethBins","getCol","k","p","j","l1","toLowerCase","l2","leftPx2","rightPx2","renderMethylation","renderMismatches","minSubfeatureWidth","largeInsertionIndicatorScale","mismatchAlpha","drawSNPsMuted","drawIndels","pxPerBp","min","mismatches","extraHorizontallyFlippedOffset","mismatch","mstart","mlen","mbase","widthPx","max","baseColor","c","undefined","qual","round","contrastColor","txt","rwidth","pos","insW","clipW","adjustPx","clearRect","padding","renderSoftClipping","minFeatWidth","cliplen","charAt","s0","getContrastText","makeImageData","layoutRecords","showSoftClip","configTheme","createJBrowseTheme","Object","fromEntries","entries","key","value","getContrastBaseMap","font","includes"],"sourceRoot":""}