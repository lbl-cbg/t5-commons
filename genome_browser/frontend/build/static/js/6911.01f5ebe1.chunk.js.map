{"version":3,"file":"static/js/6911.01f5ebe1.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-bed/esm/BigBedAdapter/BigBedAdapter.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { BigBed } from '@gmod/bbi';\nimport BED from '@gmod/bed';\nimport { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { map, mergeAll } from 'rxjs/operators';\nimport { ucscProcessedTranscript } from '../util';\nfunction isUCSC(f) {\n    return f.get('thickStart') && f.get('blockCount') && f.get('strand') !== 0;\n}\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n    async configurePre(opts) {\n        const pm = this.pluginManager;\n        const bigbed = new BigBed({\n            filehandle: openLocation(this.getConf('bigBedLocation'), pm),\n        });\n        const header = await bigbed.getHeader(opts);\n        const parser = new BED({ autoSql: header.autoSql });\n        return { bigbed, header, parser };\n    }\n    async configure(opts) {\n        if (!this.cached) {\n            this.cached = this.configurePre(opts).catch(e => {\n                this.cached = undefined;\n                throw e;\n            });\n        }\n        return this.cached;\n    }\n    async getRefNames(opts) {\n        const { header } = await this.configure(opts);\n        return Object.keys(header.refsByName);\n    }\n    async getHeader(opts) {\n        const { parser, header } = await this.configure(opts);\n        const { version, fileType } = header;\n        const { fields, ...rest } = parser.autoSql;\n        return {\n            version,\n            fileType,\n            autoSql: { ...rest },\n            fields: Object.fromEntries(fields.map(({ name, comment }) => [name, comment])),\n        };\n    }\n    getFeatures(region, opts = {}) {\n        const { refName, start, end } = region;\n        const { signal } = opts;\n        return ObservableCreate(async (observer) => {\n            try {\n                const { parser, bigbed } = await this.configure(opts);\n                const ob = await bigbed.getFeatureStream(refName, start, end, {\n                    signal,\n                    basesPerSpan: end - start,\n                });\n                ob.pipe(mergeAll(), map(r => {\n                    const data = parser.parseLine(`${refName}\\t${r.start}\\t${r.end}\\t${r.rest}`, {\n                        uniqueId: r.uniqueId,\n                    });\n                    const { blockCount, blockSizes, blockStarts, chromStarts } = data;\n                    if (blockCount) {\n                        const starts = chromStarts || blockStarts || [];\n                        const sizes = blockSizes;\n                        const blocksOffset = r.start;\n                        data.subfeatures = [];\n                        for (let b = 0; b < blockCount; b += 1) {\n                            const bmin = (starts[b] || 0) + blocksOffset;\n                            const bmax = bmin + (sizes[b] || 0);\n                            data.subfeatures.push({\n                                uniqueId: `${r.uniqueId}-${b}`,\n                                start: bmin,\n                                end: bmax,\n                                type: 'block',\n                            });\n                        }\n                    }\n                    if (r.uniqueId === undefined) {\n                        throw new Error('invalid bbi feature');\n                    }\n                    const { chromStart, chromEnd, chrom, ...rest } = data;\n                    const f = new SimpleFeature({\n                        id: `${this.id}-${r.uniqueId}`,\n                        data: {\n                            ...rest,\n                            start: r.start,\n                            end: r.end,\n                            refName,\n                        },\n                    });\n                    // collection of heuristics for suggesting that this feature\n                    // should be converted to a gene, CNV bigbed has many gene like\n                    // features including thickStart and blockCount but no strand\n                    return isUCSC(f) ? ucscProcessedTranscript(f) : f;\n                })).subscribe(observer);\n            }\n            catch (e) {\n                observer.error(e);\n            }\n        }, opts.signal);\n    }\n    freeResources() { }\n}\n"],"names":["BigBedAdapter","BaseFeatureDataAdapter","configurePre","opts","pm","this","pluginManager","bigbed","BigBed","filehandle","openLocation","getConf","header","getHeader","parser","BED","autoSql","configure","cached","catch","e","undefined","getRefNames","Object","keys","refsByName","version","fileType","fields","rest","fromEntries","map","_ref","name","comment","getFeatures","region","arguments","length","refName","start","end","signal","ObservableCreate","async","getFeatureStream","basesPerSpan","pipe","mergeAll","r","data","parseLine","concat","uniqueId","blockCount","blockSizes","blockStarts","chromStarts","starts","sizes","blocksOffset","subfeatures","b","bmin","bmax","push","type","Error","chromStart","chromEnd","chrom","f","SimpleFeature","id","get","isUCSC","ucscProcessedTranscript","subscribe","observer","error","freeResources"],"sourceRoot":""}