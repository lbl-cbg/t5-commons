{"version":3,"file":"static/js/9581.f6160f9f.chunk.js","mappings":"+NAEA,MAAMA,GAAYC,E,SAAAA,aAAAA,EAAaC,IAAS,CACpCC,MAAO,CACHC,OAAQ,iBACRC,OAAQH,EAAMI,QAAQ,GACtB,OAAQ,CACJC,QAASL,EAAMI,QAAQ,SAIpB,SAASE,EAAiBC,GAAqB,IAApB,cAAEC,GAAgBD,EACxD,MAAM,QAAEE,GAAYX,IACpB,OAAQY,EAAAA,cAAoB,QAAS,CAAEC,UAAWF,EAAQR,OACtDS,EAAAA,cAAoB,QAAS,KAAMF,EAAcI,KAAIC,IAAA,IAAEC,EAAKC,GAAMF,EAAA,OAAMH,EAAAA,cAAoB,KAAM,CAAEI,IAAKA,GACrGJ,EAAAA,cAAoB,KAAM,KAAMI,GAChCJ,EAAAA,cAAoB,KAAM,KAAMK,GAChCL,EAAAA,cAAoB,KAAM,CAAEM,MAAO,CAC3BC,MAAO,MACPC,WAAYH,KACX,KACrB,CChBA,MA4BA,GA5BmCI,EAAAA,EAAAA,WAAS,SAAAZ,GAAmC,IAAzB,MAAEa,EAAK,YAAEC,GAAcd,EACzE,MAAM,QAAEe,EAAO,mBAAEC,GAAuBH,EAClCZ,EAAgB,IAAIe,EAAmBC,WAC7C,OAAQd,EAAAA,cAAoBe,EAAAA,OAAQ,CAAEC,MAAM,EAAMC,QAASN,EAAaO,MAAO,0BAC3ElB,EAAAA,cAAoBmB,EAAAA,EAAe,KAC/BnB,EAAAA,cAAoBoB,EAAAA,EAAY,KAAM,6QACtCpB,EAAAA,cAAoBoB,EAAAA,EAAY,KAAM,kIACtCpB,EAAAA,cAAoB,MAAO,CAAEM,MAAO,CAAEb,OAAQ,KAC2B,mBAAxD,OAAZmB,QAAgC,IAAZA,OAAqB,EAASA,EAAQS,MAA6BrB,EAAAA,cAAoB,MAAO,KAAMF,EAAcwB,OAAUtB,EAAAA,cAAoBA,EAAAA,SAAgB,KACjL,6CACAA,EAAAA,cAAoBJ,EAAmB,CAAEE,cAAe,IAAIe,EAAmBC,cAAmBd,EAAAA,cAAoBA,EAAAA,SAAgB,KACtIA,EAAAA,cAAoBoB,EAAAA,EAAY,KAAM,qFACtCpB,EAAAA,cAAoBuB,EAAAA,EAAkB,CAAEC,KAAM,OAAY,KACO,iBAAxD,OAAZZ,QAAgC,IAAZA,OAAqB,EAASA,EAAQS,MAA2BrB,EAAAA,cAAoBJ,EAAmB,CAAEE,cAAe,CACtI,CAAC,aAAc,OACf,CAAC,eAAgB,WACb,MAChBE,EAAAA,cAAoByB,EAAAA,EAAe,KAC/BzB,EAAAA,cAAoB0B,EAAAA,EAAQ,CAAEC,QAAS,YAAaC,QAASA,KACrDlB,EAAMmB,eAAe,CAAER,KAAM,kBAC7BV,GAAa,GACZ,iBACTX,EAAAA,cAAoB0B,EAAAA,EAAQ,CAAEC,QAAS,YAAaC,QAASA,KACrDlB,EAAMmB,eAAe,CAAER,KAAM,gBAC7BV,GAAa,GACZ,eACTX,EAAAA,cAAoB0B,EAAAA,EAAQ,CAAEC,QAAS,YAAaG,MAAO,YAAaF,QAASA,IAAMjB,KAAiB,YACxH,G","sources":["../node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ModificationsTable.js","../node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ColorByModifications.js"],"sourcesContent":["import React from 'react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    table: {\n        border: '1px solid #888',\n        margin: theme.spacing(4),\n        '& td': {\n            padding: theme.spacing(1),\n        },\n    },\n}));\nexport default function ModificationTable({ modifications, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"table\", { className: classes.table },\n        React.createElement(\"tbody\", null, modifications.map(([key, value]) => (React.createElement(\"tr\", { key: key },\n            React.createElement(\"td\", null, key),\n            React.createElement(\"td\", null, value),\n            React.createElement(\"td\", { style: {\n                    width: '1em',\n                    background: value,\n                } })))))));\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, CircularProgress, DialogActions, DialogContent, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nimport ModificationTable from './ModificationsTable';\nconst ColorByModificationsDialog = observer(function ({ model, handleClose, }) {\n    const { colorBy, modificationTagMap } = model;\n    const modifications = [...modificationTagMap.entries()];\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Color by modifications\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG.\"),\n            React.createElement(Typography, null, \"Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode\"),\n            React.createElement(\"div\", { style: { margin: 20 } },\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (React.createElement(\"div\", null, modifications.length ? (React.createElement(React.Fragment, null,\n                    \"Current modification-type-to-color mapping\",\n                    React.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (React.createElement(React.Fragment, null,\n                    React.createElement(Typography, null, \"Note: color by modifications is already enabled. Loading current modifications...\"),\n                    React.createElement(CircularProgress, { size: 15 }))))) : null,\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (React.createElement(ModificationTable, { modifications: [\n                        ['methylated', 'red'],\n                        ['unmethylated', 'blue'],\n                    ] })) : null),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        model.setColorScheme({ type: 'modifications' });\n                        handleClose();\n                    } }, \"Modifications\"),\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        model.setColorScheme({ type: 'methylation' });\n                        handleClose();\n                    } }, \"Methylation\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => handleClose() }, \"Cancel\")))));\n});\nexport default ColorByModificationsDialog;\n"],"names":["useStyles","makeStyles","theme","table","border","margin","spacing","padding","ModificationTable","_ref","modifications","classes","React","className","map","_ref2","key","value","style","width","background","observer","model","handleClose","colorBy","modificationTagMap","entries","Dialog","open","onClose","title","DialogContent","Typography","type","length","CircularProgress","size","DialogActions","Button","variant","onClick","setColorScheme","color"],"sourceRoot":""}