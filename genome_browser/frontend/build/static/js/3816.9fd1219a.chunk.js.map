{"version":3,"file":"static/js/3816.9fd1219a.chunk.js","mappings":"uKAGO,SAASA,EAAcC,EAAMC,GAIhC,SAASC,EAAKC,GACV,MAAMC,EAASJ,EAAKK,IACpB,IAAKD,EACD,OAEJ,MAAME,EAAMF,EAAOG,WAAW,MACzBD,GAGAN,EAAKQ,YAGVF,EAAIG,UAAU,EAAG,EAAGL,EAAOM,MAAqB,EAAdV,EAAKW,QACvCL,EAAIM,iBACJN,EAAIO,MAAM,EAAG,GACbZ,EAAGD,EAAMM,EAAKF,EAAOM,MAAOV,EAAKW,QACjCX,EAAKc,qBAAqBX,EAAKY,UAC/Bf,EAAKgB,oBAAoBb,EAAKc,SAClC,EArBAC,EAAAA,EAAAA,IAAclB,GAAMmB,gBCFjBA,eAA2BnB,GAE9B,MAAQoB,aAAcC,IAAcC,EAAAA,EAAAA,oBAAmBtB,IACjD,WAAEuB,IAAeC,EAAAA,EAAAA,YAAWxB,GAC5BG,GAAOsB,EAAAA,EAAAA,mBAAkBzB,GAC/B,IAAKG,EAAKuB,aAAe1B,EAAK2B,OAAS3B,EAAK4B,eACxC,OAEJ5B,EAAK6B,YAAW,GAChB,MAAMC,QAAaP,EAAWQ,KAAKV,EAAW,2BAA4B,CACtEA,YACAW,QAAS7B,EAAK8B,aAAaC,cAC3BC,UAAUC,EAAAA,EAAAA,aAAYpC,EAAKmC,UAC3BE,cAAerC,EAAKqC,gBAExBrC,EAAKsC,aAAaR,GAClB9B,EAAK6B,YAAW,EACpB,CDdcU,CAAYvC,EAAK,GACxB,CAAEwC,MAAO,OAqBZtB,EAAAA,EAAAA,IAAclB,GAAMmB,UAChB,MAAMhB,GAAOsB,EAAAA,EAAAA,mBAAkBzB,GAC3BG,EAAKc,UAAYjB,EAAKyC,kBACtBvC,EAAKC,EACT,KAGJe,EAAAA,EAAAA,IAAclB,GAAMmB,UAEhBjB,GADauB,EAAAA,EAAAA,mBAAkBzB,GACrB,GACX,CAAEwC,MAAO,KAChB,C","sources":["../node_modules/@jbrowse/plugin-alignments/esm/shared/afterAttach.js","../node_modules/@jbrowse/plugin-alignments/esm/shared/fetchChains.js"],"sourcesContent":["import { getContainingView } from '@jbrowse/core/util';\nimport { createAutorun } from '../util';\nimport { fetchChains } from './fetchChains';\nexport function doAfterAttach(self, cb) {\n    createAutorun(self, async () => {\n        await fetchChains(self);\n    }, { delay: 1000 });\n    function draw(view) {\n        const canvas = self.ref;\n        if (!canvas) {\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            return;\n        }\n        if (!self.chainData) {\n            return;\n        }\n        ctx.clearRect(0, 0, canvas.width, self.height * 2);\n        ctx.resetTransform();\n        ctx.scale(2, 2);\n        cb(self, ctx, canvas.width, self.height);\n        self.setLastDrawnOffsetPx(view.offsetPx);\n        self.setLastDrawnBpPerPx(view.bpPerPx);\n    }\n    // first autorun instantly draws if bpPerPx changes\n    createAutorun(self, async () => {\n        const view = getContainingView(self);\n        if (view.bpPerPx !== self.lastDrawnBpPerPx) {\n            draw(view);\n        }\n    });\n    // second autorun draws after delay 1000 e.g. if offsetPx changes\n    createAutorun(self, async () => {\n        const view = getContainingView(self);\n        draw(view);\n    }, { delay: 1000 });\n}\n","import { getContainingTrack, getContainingView, getSession, } from '@jbrowse/core/util';\nimport { getSnapshot } from 'mobx-state-tree';\nexport async function fetchChains(self) {\n    // @ts-expect-error\n    const { rpcSessionId: sessionId } = getContainingTrack(self);\n    const { rpcManager } = getSession(self);\n    const view = getContainingView(self);\n    if (!view.initialized || self.error || self.regionTooLarge) {\n        return;\n    }\n    self.setLoading(true);\n    const ret = (await rpcManager.call(sessionId, 'PileupGetReducedFeatures', {\n        sessionId,\n        regions: view.staticBlocks.contentBlocks,\n        filterBy: getSnapshot(self.filterBy),\n        adapterConfig: self.adapterConfig,\n    }));\n    self.setChainData(ret);\n    self.setLoading(false);\n}\n"],"names":["doAfterAttach","self","cb","draw","view","canvas","ref","ctx","getContext","chainData","clearRect","width","height","resetTransform","scale","setLastDrawnOffsetPx","offsetPx","setLastDrawnBpPerPx","bpPerPx","createAutorun","async","rpcSessionId","sessionId","getContainingTrack","rpcManager","getSession","getContainingView","initialized","error","regionTooLarge","setLoading","ret","call","regions","staticBlocks","contentBlocks","filterBy","getSnapshot","adapterConfig","setChainData","fetchChains","delay","lastDrawnBpPerPx"],"sourceRoot":""}