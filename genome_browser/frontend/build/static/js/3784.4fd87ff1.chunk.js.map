{"version":3,"file":"static/js/3784.4fd87ff1.chunk.js","mappings":"sMAIO,SAASA,EAAaC,GACzB,MAAMC,EAAW,IAAIC,IACrB,IAAK,MAAMC,KAASH,EAChB,GAAIG,EAAO,CACP,MAAMC,EAAI,IAAIC,EAAAA,QAAcF,GACtBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAASP,EAASM,IAAID,GACrBE,IACDA,EAAS,GACTP,EAASQ,IAAIH,EAASE,IAE1BA,EAAOE,KAAKN,EAChB,CAGJ,IAAK,MAAMO,KAAeV,EAASW,SAC/BD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAEtD,OAAON,CACX,CACe,MAAMe,UAA0BC,EAAAA,uBAC3CC,WAAAA,CAAYC,EAAMC,EAAeC,GAC7BC,MAAMH,EAAMC,EAAeC,GAC3B,MAAME,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACnCM,KAAKxB,SAAWF,EAAawB,GAAS,GAC1C,CACA,iBAAMG,GACF,MAAO,IAAID,KAAKxB,SAAS0B,OAC7B,CACA,uBAAMC,GACF,MAAO,IAAIH,KAAKxB,SAASW,UAAUiB,KAAIC,IAAgB,CACnDxB,QAASwB,EAAa,GAAGvB,IAAI,WAC7BwB,QAASD,EAAa,GAAGvB,IAAI,cAErC,CACAyB,WAAAA,CAAYC,GACR,MAAM,QAAE3B,EAAO,MAAE4B,EAAK,IAAEC,GAAQF,EAChC,OAAOG,EAAAA,EAAAA,mBAAiBC,UACpB,MAAMpC,EAAWwB,KAAKxB,SAASM,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKH,EACRG,EAAEG,IAAI,OAAS2B,GAAS9B,EAAEG,IAAI,SAAW4B,GACzCG,EAASC,KAAKnC,GAGtBkC,EAASE,UAAU,GAE3B,CACAC,aAAAA,GAAmC,E","sources":["../node_modules/@jbrowse/plugin-config/esm/FromConfigAdapter/FromConfigAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nexport function makeFeatures(fdata) {\n    const features = new Map();\n    for (const entry of fdata) {\n        if (entry) {\n            const f = new SimpleFeature(entry);\n            const refName = f.get('refName');\n            let bucket = features.get(refName);\n            if (!bucket) {\n                bucket = [];\n                features.set(refName, bucket);\n            }\n            bucket.push(f);\n        }\n    }\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n        refFeatures.sort((a, b) => a.get('start') - b.get('start'));\n    }\n    return features;\n}\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n    constructor(conf, getSubAdapter, pluginManager) {\n        super(conf, getSubAdapter, pluginManager);\n        const feats = readConfObject(conf, 'features');\n        this.features = makeFeatures(feats || []);\n    }\n    async getRefNames() {\n        return [...this.features.keys()];\n    }\n    async getRefNameAliases() {\n        return [...this.features.values()].map(featureArray => ({\n            refName: featureArray[0].get('refName'),\n            aliases: featureArray[0].get('aliases'),\n        }));\n    }\n    getFeatures(region) {\n        const { refName, start, end } = region;\n        return ObservableCreate(async (observer) => {\n            const features = this.features.get(refName) || [];\n            for (const f of features) {\n                if (f.get('end') > start && f.get('start') < end) {\n                    observer.next(f);\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources( /* { region } */) { }\n}\n"],"names":["makeFeatures","fdata","features","Map","entry","f","SimpleFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","feats","readConfObject","this","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources"],"sourceRoot":""}