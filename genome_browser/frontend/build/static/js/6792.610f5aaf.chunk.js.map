{"version":3,"file":"static/js/6792.610f5aaf.chunk.js","mappings":"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","sources":["../node_modules/@jbrowse/plugin-alignments/esm/shared/FilterByTag.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, DialogActions, DialogContent, Link, Paper, TextField, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n    field: {\n        margin: theme.spacing(2),\n    },\n}));\nconst flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n];\nfunction Bitmask(props) {\n    const { flag = 0, setFlag } = props;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(TextField, { type: \"number\", value: flag, onChange: event => setFlag(+event.target.value) }),\n        flagNames.map((name, index) => {\n            const val = flag & (1 << index);\n            const key = `${name}_${val}`;\n            return (React.createElement(\"div\", { key: key },\n                React.createElement(\"input\", { type: \"checkbox\", checked: Boolean(val), onChange: event => {\n                        if (event.target.checked) {\n                            setFlag(flag | (1 << index));\n                        }\n                        else {\n                            setFlag(flag & ~(1 << index));\n                        }\n                    } }),\n                React.createElement(\"label\", { htmlFor: key }, name)));\n        })));\n}\nconst FilterByTagDialog = observer(function (props) {\n    var _a, _b;\n    const { model, handleClose } = props;\n    const { classes } = useStyles();\n    const { filterBy } = model;\n    const [flagInclude, setFlagInclude] = useState(filterBy.flagInclude);\n    const [flagExclude, setFlagExclude] = useState(filterBy.flagExclude);\n    const [tag, setTag] = useState(((_a = filterBy.tagFilter) === null || _a === void 0 ? void 0 : _a.tag) || '');\n    const [tagValue, setTagValue] = useState(((_b = filterBy.tagFilter) === null || _b === void 0 ? void 0 : _b.value) || '');\n    const [readName, setReadName] = useState(filterBy.readName || '');\n    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);\n    const site = 'https://broadinstitute.github.io/picard/explain-flags.html';\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Filter options\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null,\n                \"Set filter bitmask options. Refer to \",\n                React.createElement(Link, { href: site }, site),\n                ' ',\n                \"for details\"),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(\"div\", { style: { display: 'flex' } },\n                    React.createElement(\"div\", null,\n                        React.createElement(Typography, null, \"Read must have ALL these flags\"),\n                        React.createElement(Bitmask, { flag: flagInclude, setFlag: setFlagInclude })),\n                    React.createElement(\"div\", null,\n                        React.createElement(Typography, null, \"Read must have NONE of these flags\"),\n                        React.createElement(Bitmask, { flag: flagExclude, setFlag: setFlagExclude })))),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(Typography, null, \"Filter by tag name and value. Use * in the value field to get all reads containing any value for that tag. Example: filter tag name SA with value * to get all split/supplementary reads. Other examples include HP for haplotype, or RG for read group\"),\n                React.createElement(TextField, { className: classes.field, value: tag, onChange: event => setTag(event.target.value), placeholder: \"Enter tag name\", inputProps: { maxLength: 2 }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '' }),\n                React.createElement(TextField, { className: classes.field, value: tagValue, onChange: event => setTagValue(event.target.value), placeholder: \"Enter tag value\" })),\n            React.createElement(Paper, { className: classes.paper, variant: \"outlined\" },\n                React.createElement(Typography, null, \"Filter by read name\"),\n                React.createElement(TextField, { className: classes.field, value: readName, onChange: event => setReadName(event.target.value), placeholder: \"Enter read name\" })),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", autoFocus: true, type: \"submit\", onClick: () => {\n                        model.setFilterBy({\n                            flagInclude,\n                            flagExclude,\n                            readName,\n                            tagFilter: tag !== ''\n                                ? {\n                                    tag,\n                                    value: tagValue,\n                                }\n                                : undefined,\n                        });\n                        handleClose();\n                    } }, \"Submit\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => handleClose() }, \"Cancel\")))));\n});\nexport default FilterByTagDialog;\n"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","margin","field","flagNames","Bitmask","props","flag","setFlag","React","TextField","type","value","onChange","event","target","map","name","index","val","key","concat","checked","Boolean","htmlFor","observer","_a","_b","model","handleClose","classes","filterBy","flagInclude","setFlagInclude","useState","flagExclude","setFlagExclude","tag","setTag","tagFilter","tagValue","setTagValue","readName","setReadName","validTag","match","site","Dialog","open","onClose","title","DialogContent","Typography","Link","href","Paper","className","variant","style","display","placeholder","inputProps","maxLength","error","length","helperText","DialogActions","Button","color","autoFocus","onClick","setFilterBy","undefined"],"sourceRoot":""}