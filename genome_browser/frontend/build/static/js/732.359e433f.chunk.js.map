{"version":3,"file":"static/js/732.359e433f.chunk.js","mappings":"0MAIO,SAASA,EAAaC,GACzB,MAAMC,EAAW,IAAIC,IACrB,IAAK,MAAMC,KAASH,EAChB,GAAIG,EAAO,CACP,MAAMC,EAAI,IAAIC,EAAAA,QAAcF,GACtBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAASP,EAASM,IAAID,GACrBE,IACDA,EAAS,GACTP,EAASQ,IAAIH,EAASE,IAE1BA,EAAOE,KAAKN,EAChB,CAGJ,IAAK,MAAMO,KAAeV,EAASW,SAC/BD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAEtD,OAAON,CACX,CACe,MAAMe,UAA0BC,EAAAA,uBAC3CC,WAAAA,CAAYC,EAAMC,EAAeC,GAC7BC,MAAMH,EAAMC,EAAeC,GAC3B,MAAME,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACnCM,KAAKxB,SAAWF,EAAawB,GAAS,GAC1C,CACA,iBAAMG,GACF,MAAO,IAAID,KAAKxB,SAAS0B,OAC7B,CACA,uBAAMC,GACF,MAAO,IAAIH,KAAKxB,SAASW,UAAUiB,KAAIC,IAAgB,CACnDxB,QAASwB,EAAa,GAAGvB,IAAI,WAC7BwB,QAASD,EAAa,GAAGvB,IAAI,cAErC,CACAyB,WAAAA,CAAYC,GACR,MAAM,QAAE3B,EAAO,MAAE4B,EAAK,IAAEC,GAAQF,EAChC,OAAOG,EAAAA,EAAAA,mBAAiBC,UACpB,MAAMpC,EAAWwB,KAAKxB,SAASM,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKH,EACRG,EAAEG,IAAI,OAAS2B,GAAS9B,EAAEG,IAAI,SAAW4B,GACzCG,EAASC,KAAKnC,GAGtBkC,EAASE,UAAU,GAE3B,CACAC,aAAAA,GAAmC,E,0GC7CxB,MAAMC,UAAkC1B,EAAAA,QAMnDgB,WAAAA,CAAYC,GACR,OAAOG,EAAAA,EAAAA,mBAAiBC,UACpB,MACMM,SADcC,EAAAA,EAAAA,GAAetB,MAAMU,YAAYC,GAAQY,MAAKC,EAAAA,EAAAA,QAC/C,GACnBR,EAASC,KAAK,IAAIlC,EAAAA,QAAc,IACzBsC,EAAKI,SACRC,SAAU,GAAFC,OAAKN,EAAKO,KAAI,KAAAD,OAAIhB,EAAOC,MAAK,KAAAe,OAAIhB,EAAOE,KACjDA,IAAKF,EAAOE,IACZD,MAAOD,EAAOC,MACdiB,IAAKR,EACApC,IAAI,OACJ6C,MAAMC,KAAKC,IAAIrB,EAAOC,MAAQS,EAAKpC,IAAI,SAAU,GAAI8C,KAAKC,IAAIrB,EAAOE,IAAMQ,EAAKpC,IAAI,SAAU,OAEvG+B,EAASE,UAAU,GAE3B,CAIA,gBAAMe,GACF,MAAMC,EAAU,GAEhB,IAAK,MAAOlD,EAASL,KAAawB,KAAKxB,SAAU,CAC7C,IAAIwD,EACJ,IAAK,MAAMC,KAAWzD,EACdwD,GACAA,EAActB,KAAOuB,EAAQnD,IAAI,UACjCkD,EAAcvB,OAASwB,EAAQnD,IAAI,OACnCkD,EAActB,IAAMuB,EAAQnD,IAAI,QAG5BkD,GACAD,EAAQ9C,KAAK+C,GAEjBA,EAAgB,CACZnD,UACA4B,MAAOwB,EAAQnD,IAAI,SACnB4B,IAAKuB,EAAQnD,IAAI,SAIzBkD,GACAD,EAAQ9C,KAAK+C,EAErB,CACA,OAAOD,CACX,CAMAf,aAAAA,GAAmC,E","sources":["../node_modules/@jbrowse/plugin-config/esm/FromConfigAdapter/FromConfigAdapter.js","../node_modules/@jbrowse/plugin-config/esm/FromConfigSequenceAdapter/FromConfigSequenceAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nexport function makeFeatures(fdata) {\n    const features = new Map();\n    for (const entry of fdata) {\n        if (entry) {\n            const f = new SimpleFeature(entry);\n            const refName = f.get('refName');\n            let bucket = features.get(refName);\n            if (!bucket) {\n                bucket = [];\n                features.set(refName, bucket);\n            }\n            bucket.push(f);\n        }\n    }\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n        refFeatures.sort((a, b) => a.get('start') - b.get('start'));\n    }\n    return features;\n}\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n    constructor(conf, getSubAdapter, pluginManager) {\n        super(conf, getSubAdapter, pluginManager);\n        const feats = readConfObject(conf, 'features');\n        this.features = makeFeatures(feats || []);\n    }\n    async getRefNames() {\n        return [...this.features.keys()];\n    }\n    async getRefNameAliases() {\n        return [...this.features.values()].map(featureArray => ({\n            refName: featureArray[0].get('refName'),\n            aliases: featureArray[0].get('aliases'),\n        }));\n    }\n    getFeatures(region) {\n        const { refName, start, end } = region;\n        return ObservableCreate(async (observer) => {\n            const features = this.features.get(refName) || [];\n            for (const f of features) {\n                if (f.get('end') > start && f.get('start') < end) {\n                    observer.next(f);\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources( /* { region } */) { }\n}\n","import SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { toArray } from 'rxjs/operators';\n// locals\nimport FromConfigAdapter from '../FromConfigAdapter/FromConfigAdapter';\nimport { firstValueFrom } from 'rxjs';\nexport default class FromConfigSequenceAdapter extends FromConfigAdapter {\n    /**\n     * Fetch features for a certain region\n     * @param region - Region\n     * @returns Observable of Feature objects in the region\n     */\n    getFeatures(region) {\n        return ObservableCreate(async (observer) => {\n            const feats = await firstValueFrom(super.getFeatures(region).pipe(toArray()));\n            const feat = feats[0];\n            observer.next(new SimpleFeature({\n                ...feat.toJSON(),\n                uniqueId: `${feat.id()}:${region.start}-${region.end}`,\n                end: region.end,\n                start: region.start,\n                seq: feat\n                    .get('seq')\n                    .slice(Math.max(region.start - feat.get('start'), 0), Math.max(region.end - feat.get('start'), 0)),\n            }));\n            observer.complete();\n        });\n    }\n    /**\n     * Get refName, start, and end for all features after collapsing any overlaps\n     */\n    async getRegions() {\n        const regions = [];\n        // recall: features are stored in this object sorted by start coordinate\n        for (const [refName, features] of this.features) {\n            let currentRegion;\n            for (const feature of features) {\n                if (currentRegion &&\n                    currentRegion.end >= feature.get('start') &&\n                    currentRegion.start <= feature.get('end')) {\n                    currentRegion.end = feature.get('end');\n                }\n                else {\n                    if (currentRegion) {\n                        regions.push(currentRegion);\n                    }\n                    currentRegion = {\n                        refName,\n                        start: feature.get('start'),\n                        end: feature.get('end'),\n                    };\n                }\n            }\n            if (currentRegion) {\n                regions.push(currentRegion);\n            }\n        }\n        return regions;\n    }\n    /**\n     * called to provide a hint that data tied to a certain region\n     * will not be needed for the foreseeable future and can be purged\n     * from caches, etc\n     */\n    freeResources( /* { region } */) { }\n}\n"],"names":["makeFeatures","fdata","features","Map","entry","f","SimpleFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","feats","readConfObject","this","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources","FromConfigSequenceAdapter","feat","firstValueFrom","pipe","toArray","toJSON","uniqueId","concat","id","seq","slice","Math","max","getRegions","regions","currentRegion","feature"],"sourceRoot":""}