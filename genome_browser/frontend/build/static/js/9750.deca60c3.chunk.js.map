{"version":3,"file":"static/js/9750.deca60c3.chunk.js","mappings":"2MAIO,SAASA,EAAaC,GACzB,MAAMC,EAAW,IAAIC,IACrB,IAAK,MAAMC,KAASH,EAChB,GAAIG,EAAO,CACP,MAAMC,EAAI,IAAIC,EAAAA,QAAcF,GACtBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAASP,EAASM,IAAID,GACrBE,IACDA,EAAS,GACTP,EAASQ,IAAIH,EAASE,IAE1BA,EAAOE,KAAKN,EAChB,CAGJ,IAAK,MAAMO,KAAeV,EAASW,SAC/BD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAEtD,OAAON,CACX,CACe,MAAMe,UAA0BC,EAAAA,uBAC3CC,WAAAA,CAAYC,EAAMC,EAAeC,GAC7BC,MAAMH,EAAMC,EAAeC,GAC3B,MAAME,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACnCM,KAAKxB,SAAWF,EAAawB,GAAS,GAC1C,CACA,iBAAMG,GACF,MAAO,IAAID,KAAKxB,SAAS0B,OAC7B,CACA,uBAAMC,GACF,MAAO,IAAIH,KAAKxB,SAASW,UAAUiB,KAAIC,IAAgB,CACnDxB,QAASwB,EAAa,GAAGvB,IAAI,WAC7BwB,QAASD,EAAa,GAAGvB,IAAI,cAErC,CACAyB,WAAAA,CAAYC,GACR,MAAM,QAAE3B,EAAO,MAAE4B,EAAK,IAAEC,GAAQF,EAChC,OAAOG,EAAAA,EAAAA,mBAAiBC,UACpB,MAAMpC,EAAWwB,KAAKxB,SAASM,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKH,EACRG,EAAEG,IAAI,OAAS2B,GAAS9B,EAAEG,IAAI,SAAW4B,GACzCG,EAASC,KAAKnC,GAGtBkC,EAASE,UAAU,GAE3B,CACAC,aAAAA,GAAmC,E,qFC3CxB,MAAMC,UAAiCC,EAAAA,YAClDzB,WAAAA,CAAY0B,EAAQxB,EAAeC,GAC/BC,MAAMsB,EAAQxB,EAAeC,GAC7B,MAAMjB,GAAIoB,EAAAA,EAAAA,gBAAeoB,EAAQ,YACjCnB,KAAKxB,UAAWF,EAAAA,EAAAA,cAAaK,GAAK,GACtC,CAIA,gBAAMyC,GACF,MAAMC,EAAU,GAEhB,IAAK,MAAOxC,EAASL,KAAawB,KAAKxB,SAAU,CAC7C,IAAI8C,EACJ,IAAK,MAAMC,KAAW/C,EACd8C,GACAA,EAAcZ,KAAOa,EAAQzC,IAAI,UACjCwC,EAAcb,OAASc,EAAQzC,IAAI,OACnCwC,EAAcZ,IAAMa,EAAQzC,IAAI,QAG5BwC,GACAD,EAAQpC,KAAKqC,GAEjBA,EAAgB,CACZzC,UACA4B,MAAOc,EAAQzC,IAAI,SACnB4B,IAAKa,EAAQzC,IAAI,SAIzBwC,GACAD,EAAQpC,KAAKqC,EAErB,CAGA,OADAD,EAAQjC,MAAK,CAACC,EAAGC,IAAMD,EAAER,QAAQ2C,cAAclC,EAAET,WAC1CwC,CACX,CACAL,aAAAA,GAAmC,E","sources":["../node_modules/@jbrowse/plugin-config/esm/FromConfigAdapter/FromConfigAdapter.js","../node_modules/@jbrowse/plugin-config/esm/FromConfigRegionsAdapter/FromConfigRegionsAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nexport function makeFeatures(fdata) {\n    const features = new Map();\n    for (const entry of fdata) {\n        if (entry) {\n            const f = new SimpleFeature(entry);\n            const refName = f.get('refName');\n            let bucket = features.get(refName);\n            if (!bucket) {\n                bucket = [];\n                features.set(refName, bucket);\n            }\n            bucket.push(f);\n        }\n    }\n    // sort the features on each reference sequence by start coordinate\n    for (const refFeatures of features.values()) {\n        refFeatures.sort((a, b) => a.get('start') - b.get('start'));\n    }\n    return features;\n}\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n    constructor(conf, getSubAdapter, pluginManager) {\n        super(conf, getSubAdapter, pluginManager);\n        const feats = readConfObject(conf, 'features');\n        this.features = makeFeatures(feats || []);\n    }\n    async getRefNames() {\n        return [...this.features.keys()];\n    }\n    async getRefNameAliases() {\n        return [...this.features.values()].map(featureArray => ({\n            refName: featureArray[0].get('refName'),\n            aliases: featureArray[0].get('aliases'),\n        }));\n    }\n    getFeatures(region) {\n        const { refName, start, end } = region;\n        return ObservableCreate(async (observer) => {\n            const features = this.features.get(refName) || [];\n            for (const f of features) {\n                if (f.get('end') > start && f.get('start') < end) {\n                    observer.next(f);\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources( /* { region } */) { }\n}\n","import { BaseAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { readConfObject, } from '@jbrowse/core/configuration';\nimport { makeFeatures } from '../FromConfigAdapter/FromConfigAdapter';\n/**\n * Adapter that just returns the features defined in its `features` configuration\n * key, like:\n *   `\"features\": [ { \"refName\": \"ctgA\", \"start\":1, \"end\":20 }, ... ]`\n */\nexport default class FromConfigRegionsAdapter extends BaseAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const f = readConfObject(config, 'features');\n        this.features = makeFeatures(f || []);\n    }\n    /**\n     * Get refName, start, and end for all features after collapsing any overlaps\n     */\n    async getRegions() {\n        const regions = [];\n        // recall: features are stored in this object sorted by start coordinate\n        for (const [refName, features] of this.features) {\n            let currentRegion;\n            for (const feature of features) {\n                if (currentRegion &&\n                    currentRegion.end >= feature.get('start') &&\n                    currentRegion.start <= feature.get('end')) {\n                    currentRegion.end = feature.get('end');\n                }\n                else {\n                    if (currentRegion) {\n                        regions.push(currentRegion);\n                    }\n                    currentRegion = {\n                        refName,\n                        start: feature.get('start'),\n                        end: feature.get('end'),\n                    };\n                }\n            }\n            if (currentRegion) {\n                regions.push(currentRegion);\n            }\n        }\n        // sort the regions by refName\n        regions.sort((a, b) => a.refName.localeCompare(b.refName));\n        return regions;\n    }\n    freeResources( /* { region } */) { }\n}\n"],"names":["makeFeatures","fdata","features","Map","entry","f","SimpleFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","feats","readConfObject","this","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources","FromConfigRegionsAdapter","BaseAdapter","config","getRegions","regions","currentRegion","feature","localeCompare"],"sourceRoot":""}