{"version":3,"file":"static/js/6323.17b006f2.chunk.js","mappings":"yMAMA,MAAMA,UAAsBC,EAAAA,uBACxB,cAAMC,CAASC,GACX,MAAM,eAAEC,EAAiBA,UAAcD,GAAQ,CAAC,EAC1CE,EAAKC,KAAKC,cACVC,EAAS,IAAIC,EAAAA,EAAO,CACtBC,YAAYC,EAAAA,EAAAA,cAAaL,KAAKM,QAAQ,kBAAmBP,KAEvDQ,QAAeC,EAAAA,EAAAA,cAAa,4BAA6BV,GAAgB,IAAMI,EAAOO,UAAUZ,KACtG,MAAO,CAAEK,SAAQK,SACrB,CACA,WAAMG,CAAMb,GAOR,OANKG,KAAKW,SACNX,KAAKW,OAASX,KAAKJ,SAASC,GAAMe,OAAMC,IAEpC,MADAb,KAAKW,YAASG,EACRD,CAAC,KAGRb,KAAKW,MAChB,CACA,iBAAMI,CAAYlB,GACd,MAAM,OAAEU,SAAiBP,KAAKU,MAAMb,GACpC,OAAOmB,OAAOC,KAAKV,EAAOW,WAC9B,CACA,iBAAMC,CAAYC,GACd,IAAIC,EACJ,MAAM,OAAEd,SAAiBP,KAAKU,QAC9B,OAA6C,QAArCW,EAAKd,EAAOe,aAAaF,UAA2B,IAAPC,OAAgB,EAASA,EAAGE,IACrF,CACA,oBAAMC,CAAe3B,GACjB,MAAM,OAAEU,SAAiBP,KAAKU,MAAMb,GACpC,OAAO4B,EAAAA,EAAAA,cAAalB,EAAOmB,aAC/B,CACAC,WAAAA,CAAYC,GAAmB,IAAX/B,EAAIgC,UAAAC,OAAA,QAAAhB,IAAAe,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxB,MAAM,QAAEE,EAAO,MAAEC,EAAK,IAAEC,GAAQL,GAC1B,QAAEM,EAAU,EAAC,OAAEC,EAAM,WAAEC,EAAa,EAAC,eAAEtC,EAAiBA,UAAeD,EAC7E,OAAOwC,EAAAA,EAAAA,mBAAiBC,UACpBxC,EAAe,2BACf,MAAMyC,EAASvC,KAAKM,QAAQ,WACtB,OAAEJ,SAAiBF,KAAKU,MAAMb,GAC9B2C,QAActC,EAAOyB,YAAYI,EAASC,EAAOC,EAAK,IACrDpC,EACH4C,aAAcP,EAAUE,IAE5B,IAAK,MAAMM,KAAQF,EAAO,CAClBD,IAEAG,EAAKH,OAASA,GAElB,MAAMI,EAAW,GAAHC,OAAML,EAAM,KAAAK,OAAIhB,EAAOG,QAAO,KAAAa,OAAIF,EAAKV,MAAK,KAAAY,OAAIF,EAAKT,KAEnES,EAAKX,QAAUA,EACfW,EAAKC,SAAWA,EAChBE,EAASC,KAAK,CAEVC,IAAMC,GAAQN,EAAKM,GACnBC,GAAIA,IAAMN,EAEVO,OAAQA,IAAMR,GAEtB,CACAG,EAASM,UAAU,GACpBhB,EACP,CAEA,uCAAMiB,CAAkCC,GACpC,MAAO,CAAEC,eAAgB,EAC7B,CACAC,aAAAA,GAAkB,EAEtB7D,EAAc8D,aAAe,CACzB,gBACA,gBACA,kBAEJ,S","sources":["../node_modules/@jbrowse/plugin-wiggle/esm/BigWigAdapter/BigWigAdapter.js"],"sourcesContent":["import { BigWig } from '@gmod/bbi';\nimport { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { updateStatus } from '@jbrowse/core/util';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { rectifyStats, } from '@jbrowse/core/util/stats';\nclass BigWigAdapter extends BaseFeatureDataAdapter {\n    async setupPre(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        const pm = this.pluginManager;\n        const bigwig = new BigWig({\n            filehandle: openLocation(this.getConf('bigWigLocation'), pm),\n        });\n        const header = await updateStatus('Downloading bigwig header', statusCallback, () => bigwig.getHeader(opts));\n        return { bigwig, header };\n    }\n    async setup(opts) {\n        if (!this.setupP) {\n            this.setupP = this.setupPre(opts).catch(e => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async getRefNames(opts) {\n        const { header } = await this.setup(opts);\n        return Object.keys(header.refsByName);\n    }\n    async refIdToName(refId) {\n        var _a;\n        const { header } = await this.setup();\n        return (_a = header.refsByNumber[refId]) === null || _a === void 0 ? void 0 : _a.name;\n    }\n    async getGlobalStats(opts) {\n        const { header } = await this.setup(opts);\n        return rectifyStats(header.totalSummary);\n    }\n    getFeatures(region, opts = {}) {\n        const { refName, start, end } = region;\n        const { bpPerPx = 0, signal, resolution = 1, statusCallback = () => { }, } = opts;\n        return ObservableCreate(async (observer) => {\n            statusCallback('Downloading bigwig data');\n            const source = this.getConf('source');\n            const { bigwig } = await this.setup(opts);\n            const feats = await bigwig.getFeatures(refName, start, end, {\n                ...opts,\n                basesPerSpan: bpPerPx / resolution,\n            });\n            for (const data of feats) {\n                if (source) {\n                    // @ts-expect-error\n                    data.source = source;\n                }\n                const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`;\n                // @ts-expect-error\n                data.refName = refName;\n                data.uniqueId = uniqueId;\n                observer.next({\n                    // @ts-expect-error\n                    get: (str) => data[str],\n                    id: () => uniqueId,\n                    // @ts-expect-error\n                    toJSON: () => data,\n                });\n            }\n            observer.complete();\n        }, signal);\n    }\n    // always render bigwig instead of calculating a feature density for it\n    async getMultiRegionFeatureDensityStats(_regions) {\n        return { featureDensity: 0 };\n    }\n    freeResources() { }\n}\nBigWigAdapter.capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n];\nexport default BigWigAdapter;\n"],"names":["BigWigAdapter","BaseFeatureDataAdapter","setupPre","opts","statusCallback","pm","this","pluginManager","bigwig","BigWig","filehandle","openLocation","getConf","header","updateStatus","getHeader","setup","setupP","catch","e","undefined","getRefNames","Object","keys","refsByName","refIdToName","refId","_a","refsByNumber","name","getGlobalStats","rectifyStats","totalSummary","getFeatures","region","arguments","length","refName","start","end","bpPerPx","signal","resolution","ObservableCreate","async","source","feats","basesPerSpan","data","uniqueId","concat","observer","next","get","str","id","toJSON","complete","getMultiRegionFeatureDensityStats","_regions","featureDensity","freeResources","capabilities"],"sourceRoot":""}