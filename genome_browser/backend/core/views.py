from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
import requests
import urllib
import json
from django.conf import settings
import base64 
import re
import os

ANL_TOKEN = os.environ.get("ANL_API_TOKEN")
login_endpoint = 'https://sg.bio.anl.gov/intranet/utilities/servers/apilogin.aspx'
braveapi_endpoint = 'https://sg.bio.anl.gov/intranet/utilities/servers/apibrave.aspx'


JIRA_API_TOKEN_YONG = os.environ.get("JIRA_API_TOKEN_YONG")
username = os.environ.get("JIRA_USERNAME")
jira_credentials = f'{username}:{JIRA_API_TOKEN_YONG}'
print("---jira_credentials:",jira_credentials)
jira_encoded_credentials = base64.b64encode(jira_credentials.encode('utf-8')).decode('utf-8')  
jira_servicedeskapi_url = 'https://taskforce5.atlassian.net/rest/servicedeskapi/assets/workspace'
jira_base_url = ""
jira_headers = {
        'Authorization': f'Basic {jira_encoded_credentials}',
        'Content-Type': 'application/json'
} 




def get_ANL_sessionid():
    # the below is a token for Yeongshnn (generated by Gyorgy)
    api_key = ANL_TOKEN
    print("-----api_key:",api_key)
    response = requests.get(login_endpoint, headers={'Accept': 'application/json', 'authorization': 'Bearer ' + api_key})
    response_json = response.json()
    sessionid = None
    if 'data' in response_json:
        # get sessionid
        sessionid = response_json['data']['sessionid']
    else:
        print ('Could not get sessionid')

    # print sessionid
    print('\n', 'sessionid:' , sessionid)
    return sessionid


def get_species_list(request):
    content = [
        {"taxon_id": 11021, "species":'Eastern equine encephalitis virus'}, 
        {"taxon_id": 11036,"species":'Venezuelan equine encephalitis virus'},
        {"taxon_id": 37124,"species":'Chikungunya virus'},
        {"taxon_id": 2697049, "species": 'Wuhan seafood market pneumonia virus'},
    ]
    return JsonResponse(content, safe=False)


def get_species(request,taxonid):

    target_list = get_targets_from_jira_assets(taxonid)
    return JsonResponse(target_list, safe=False)


     
    sessionid = get_ANL_sessionid() 
    if not sessionid:
        return JsonResponse({'status':'false','message':'No session'}, status=500)
    
    # the possible actions for now: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\', \'crystalsummary\']
    # assemble JSON object
    print("Get Targets...")
    json_to_get_targets = '{"data" : [{"apiaction" : "targetsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
    response = requests.post(braveapi_endpoint, data = json_to_get_targets) 
    #print("rt:",response.text)
    targets_json = response.json()
    target_list = get_target_list_from_json(taxonid, targets_json["targets"])

    json_to_get_construct = '{"data" : [{"apiaction" : "constructsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
    response = requests.post(braveapi_endpoint, data = json_to_get_construct) 
    constructs_json = response.json()
    add_construct_data_to_target_list(target_list, constructs_json["constructs"])

    json_to_get_construct = '{"data" : [{"apiaction" : "purifiedproteinsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
    response = requests.post(braveapi_endpoint, data = json_to_get_construct) 
    purifiedproteinsummarys_json = response.json()
    add_purifiedproteins_data_to_target_list(target_list, purifiedproteinsummarys_json["purifiedproteins"])

    return JsonResponse(target_list, safe=False)



def get_target(request,taxonid,braveid):
    sessionid = get_ANL_sessionid() 
    if not sessionid:
        return JsonResponse({'status':'false','message':'No session'}, status=500)
    
    print("Get Targets...")
    json_to_get_targets = '{"data" : [{"apiaction" : "targetsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
    response = requests.post(braveapi_endpoint, data = json_to_get_targets) 
    targets_json = response.json()
    target_data = get_target_from_json(braveid, targets_json["targets"])

    json_to_get_construct = '{"data" : [{"apiaction" : "constructsummary", "metadata" : "possible apiactions: [\'targetsummary\', \'constructsummary\', \'purifiedproteinsummary\', \'allpurifiedproteinsummary\', \'allcrystalsummary\' , \'crystalsummary\']"}],"submissionid" : "' + sessionid +'"}'
    response = requests.post(braveapi_endpoint, data = json_to_get_construct) 
    constructs_json = response.json()
    target_data = add_construct_data_to_target_data(target_data, constructs_json["constructs"])

    return JsonResponse(target_data, safe=False)




def get_target_list_from_json(taxonid, data_list):
    out_list = []
    targetid_list = {}
    for item in data_list:
        if item["taxonid"]==taxonid:
            if item["targetid"] not in targetid_list:
                targetid_list[item["targetid"]]=True
                out_list.append(item)
    return out_list


def get_target_from_json(originaltargetid, data_list): 
    for item in data_list:
        if item["originaltargetid"]==originaltargetid:
            return item
    return None


def add_construct_data_to_target_list(target_list, constructs):
    for titem in target_list:
        for citem in constructs:
            if citem["targetid"]==titem["targetid"]:
                titem["vector"] = citem.get("vector", "null")
                titem["expressionlevel"] = citem.get("expressionlevel", "null")
                titem["expressionlevelunit"] = citem.get("expressionlevelunit", "null")
    return target_list

def add_construct_data_to_target_data(target_data, constructs):
    
    for citem in constructs:
        if citem["targetid"]==target_data["targetid"]:
            target_data.update(citem)
            #target_data["targetproteinsequence"] = citem.get("targetproteinsequence", "null") 
    return target_data


def add_purifiedproteins_data_to_target_list(target_list, purifiedproteins):
    for titem in target_list:
        for citem in purifiedproteins:
            if citem["targetid"]==titem["targetid"]:
                titem["proteinconcentration"] = citem.get("proteinconcentration", "null")
                titem["proteinconcentrationunit"] = citem.get("proteinconcentrationunit", "null")
                titem["proteinvolume"] = citem.get("proteinvolume", "null")
                titem["proteinvolumeunit"] = citem.get("proteinvolumeunit", "null")
                titem["buffercontent"] = citem.get("buffercontent", "null")
    return target_list





















def get_targets_from_jira_assets(taxonid):
    workspace_id = get_workspace_id()  
    global jira_base_url
    jira_base_url = get_base_url(workspace_id)  

    '''
    headers = {
        'Authorization': f'Basic {jira_encoded_credentials}',
        'Content-Type': 'application/json'
    } 
    '''

    # build the attributes dictionary of Target
    '''
    objectschema_id = 9 #Target
    att_url = f'{base_url}/objecttype/{objectschema_id}/attributes'
    attributes_response = requests.get(att_url, headers=headers)
    att_results = attributes_response.json()
    att_dict = {}
    for attItem in att_results:
        att_dict[attItem["id"]] = attItem["name"]
    print("att_dict:",att_dict)
    '''


    
    #get targets
    iql_query = f'objectType = "Target" AND "Taxon ID"={taxonid}'   
    search_url = f'{jira_base_url}/object/aql'
    search_data = {
        "qlQuery": iql_query
    }
    search_response = requests.post(search_url, headers=jira_headers, data=json.dumps(search_data))
    if search_response.status_code == 200:
        target_results = search_response.json()
        target_results = target_results["values"] 
    else:
        print("Search failed:", search_response.status_code, search_response.text)
        return False
    

    #get constructs
    iql_query = f'objectType = "Construct" '   
    search_url = f'{jira_base_url}/object/aql'
    search_data = {
        "qlQuery": iql_query
    }
    search_response = requests.post(search_url, headers=jira_headers, data=json.dumps(search_data))
    if search_response.status_code == 200:
        construct_results = search_response.json()
        construct_results = construct_results["values"] 
    else:
        print("Search failed:", search_response.status_code, search_response.text)
        return False


    #get Successful Purifications
    iql_query = f'objectType = "Successful Purifications" '   
    search_url = f'{jira_base_url}/object/aql'
    search_data = {
        "qlQuery": iql_query
    }
    search_response = requests.post(search_url, headers=jira_headers, data=json.dumps(search_data))
    if search_response.status_code == 200:
        successful_purifications_results = search_response.json()
        successful_purifications_results = successful_purifications_results["values"] 
    else:
        print("Search failed:", search_response.status_code, search_response.text)
        return False

    #======TEST
    target_list = []
    for targetItem in target_results:
        print("-----ot:",getAttribute(targetItem["attributes"], "97"));
        _targetid = getAttribute(targetItem["attributes"],"96")
        iql_query = f'objectType="Construct" OR objectType="Successful Purifications" AND object having outR("Target ID"="{_targetid}")'   
        search_result = getSearchResult(iql_query)
        print("search result length:::", len(search_result))
        if len(search_result)==0 :
            target_list.append({
                "targetid":_targetid ,
                "originaltargetid": getAttribute(targetItem["attributes"], "97"),  
                "targetannotation": getAttribute(targetItem["attributes"], "100"),
                "vector": None,
                "expressionlevel": None, 
                "proteinconcentration": None, 
                "proteinvolume": None,  
                "buffercontent": None
            })
        else:
            for ri in search_result:
                new_target_item = {
                    "targetid":_targetid ,
                    "originaltargetid": getAttribute(targetItem["attributes"], "97"),  
                    "targetannotation": getAttribute(targetItem["attributes"], "100"),
                    "vector": getAttribute(ri["attributes"], "113"),
                    "expressionlevel": getAttribute(ri["attributes"], "117"), 
                    "proteinconcentration": getAttribute(ri["attributes"], "330"), 
                    "proteinvolume": getAttribute(ri["attributes"], "332"),  
                    "buffercontent": getAttribute(ri["attributes"], "335")
                }

                #skip duplicated 
                found = False
                for item in target_list:
                    if item==new_target_item:
                        found = True
                        break
                
                if found==False:
                    target_list.append(new_target_item)


    return target_list
    '''
    search_url = f'{jira_base_url}/object/aql?maxResults=1000'
    search_data = {
        "qlQuery": iql_query
    }
    search_response = requests.post(search_url, headers=jira_headers, data=json.dumps(search_data))
    if search_response.status_code == 200:
        r = search_response.json()
        return r
    else:
        print("Search failed:", search_response.status_code, search_response.text)
        return False
    '''
    #======TEST



    target_list = []
    for targetItem in target_results:
        _targetid = getAttribute(targetItem["attributes"],"96")
        construct_attributes = getConstruct(construct_results, _targetid)
        successful_purification_attributes = getSuccessfulPurifications(successful_purifications_results, targetItem)
        target_list.append({
            "targetid":_targetid ,
            "originaltargetid": getAttribute(targetItem["attributes"], "97"),  
            "targetannotation": getAttribute(targetItem["attributes"], "100"),
            "vector": getAttribute(construct_attributes, "113"),
            "expressionlevel": getAttribute(construct_attributes, "117"), 
            "proteinconcentration": getAttribute(successful_purification_attributes, "330"), 
            "proteinvolume": getAttribute(successful_purification_attributes, "332"),  
            "buffercontent": getAttribute(successful_purification_attributes, "335"), 
        })

    return target_list



def get_workspace_id():
    response = requests.get(jira_servicedeskapi_url, 
                            headers={'Content-Type': 'application/json', 
                                    'authorization': 'Basic ' + jira_encoded_credentials})
    workspaces_response_json = response.json() 
    print("JIRA workspaces:", workspaces_response_json)
    return workspaces_response_json["values"][0]["workspaceId"]
 

def get_base_url(workspace_id):
    return f'https://api.atlassian.com/jsm/assets/workspace/{workspace_id}/v1'



def getAttribute(attributes, id): 
    if not attributes:
        return None
    for attItem in attributes:
        if attItem["objectTypeAttributeId"]==id: 
            return attItem["objectAttributeValues"][0]["value"]
    return None


def getConstruct(constructs, targetId):
    for cItem in constructs:
        for attItem in cItem["attributes"]:
            #print("-->",attItem["objectAttributeValues"])
            if "value" in attItem["objectAttributeValues"][0]:
                v = attItem["objectAttributeValues"][0]["value"]
            else:
                v = "" 
            if attItem["objectTypeAttributeId"]=="533" and (targetId in v):  # find Target Trexp ID
                return cItem["attributes"]
    return None


def getSuccessfulPurifications(successful_purifications, targetItem): 
    for cItem in successful_purifications:
        print("ci:",cItem["id"])
        for attItem in cItem["attributes"]:  
            '''
            if "value" in attItem["objectAttributeValues"][0]:
                v = attItem["objectAttributeValues"][0]["value"]
            elif "referencedObject" in attItem["objectAttributeValues"][0]:
                url = attItem["objectAttributeValues"][0]["referencedObject"]["_links"]["self"]
                #print("---url:",url)
                headers = {
                    'Authorization': f'Basic {jira_encoded_credentials}',
                    'Content-Type': 'application/json'
                } 
                search_url = f'{url}'
                search_response = requests.get(search_url, headers=headers)
                if search_response.status_code == 200:
                    results = search_response.json()  
                    v = getAttribute(results["attributes"],"96")
                    print("v:",v)
                else:
                    #print("Search failed:", search_response.status_code, search_response.text)
                    v=""
            else:
                v = ""
            ''' 
            if attItem["objectTypeAttributeId"]=="323": # and (targetId in v):  # find Target ID
                print("---", attItem["objectAttributeValues"][0]["referencedObject"]["id"], targetItem["id"])
                if attItem["objectAttributeValues"][0]["referencedObject"]["id"] == targetItem["id"] :
                    print("Found",targetItem["id"])
                    return cItem["attributes"]
    return None


# run the object/aql search request, looping until no more result, concat the all "values" to return
def getSearchResult(query): 
    out = []
    _maxResults = 500
    _startAt = 0
    while True: 
        search_url = f'{jira_base_url}/object/aql?maxResults={_maxResults}&startAt={_startAt}' 
        search_data = {
            "qlQuery": query
        }
        search_response = requests.post(search_url, headers=jira_headers, data=json.dumps(search_data))
        if search_response.status_code == 200:
            r = search_response.json()
            out = out + r["values"] 
            
            if r["isLast"]==True:
                return out
            else:
                _startAt = _startAt + _maxResults
        else:
            print("Search failed:", search_response.status_code, search_response.text)
            return False